--- cs.h.~1~	2012-06-19 14:34:39.040367096 -0500
+++ cs.h	2012-06-19 14:32:40.224373237 -0500
@@ -3,8 +3,13 @@
 #include <stdlib.h>
 #include <limits.h>
 #include <math.h>
+// needed for FILE:
 #include <stdio.h>
 #include <stddef.h>
+// For use with R package 'Matrix'
+# include <R_ext/Print.h>
+# include <R_ext/Random.h>
+# define printf Rprintf
 #ifdef MATLAB_MEX_FILE
 #include "mex.h"
 #endif
@@ -19,7 +23,7 @@
 #define csi mwSignedIndex
 #endif
 #ifndef csi
-#define csi ptrdiff_t
+#define csi int
 #endif
 
 /* --- primary CSparse routines and data structures ------------------------- */
--- cs.c.~1~	2014-09-02 08:35:22.464878000 +0200
+++ cs.c	2014-09-02 08:35:51.482828000 +0200
@@ -1408,7 +1408,7 @@
     csi i, k, p, m, n, vnz, p1, top, m2, len, col, rnz, *s, *leftmost, *Ap, *Ai,
         *parent, *Rp, *Ri, *Vp, *Vi, *w, *pinv, *q ;
     cs *R, *V ;
-    csn *N ;
+    csn *N ; // the result
     if (!CS_CSC (A) || !S) return (NULL) ;
     m = A->m ; n = A->n ; Ap = A->p ; Ai = A->i ; Ax = A->x ;
     q = S->q ; parent = S->parent ; pinv = S->pinv ; m2 = S->m2 ;
@@ -1536,14 +1536,16 @@
     if (!p) return (NULL) ;             /* out of memory */
     for (k = 0 ; k < n ; k++) p [k] = n-k-1 ;
     if (seed == -1) return (p) ;        /* return reverse permutation */
+    GetRNGstate();/* <- for R package Matrix
     srand (seed) ;                      /* get new random number seed */
     for (k = 0 ; k < n ; k++)
     {
-        j = k + (rand ( ) % (n-k)) ;    /* j = rand integer in range k to n-1 */
+        j = k + (unif_rand ( ) % (n-k)) ; /* j = rand integer in range k to n-1 */
         t = p [j] ;                     /* swap p[k] and p[j] */
         p [j] = p [k] ;
         p [k] = t ;
     }
+    PutRNGstate(); // <- R package Matrix
     return (p) ;
 }
 /* xi [top...n-1] = nodes reachable from graph of G*P' via nodes in B(:,k).
