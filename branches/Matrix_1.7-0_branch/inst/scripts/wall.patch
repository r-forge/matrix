diff -ruN src/SuiteSparse/CCOLAMD/Source/ccolamd.c src/SuiteSparse-patched/CCOLAMD/Source/ccolamd.c
--- src/SuiteSparse/CCOLAMD/Source/ccolamd.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CCOLAMD/Source/ccolamd.c	2023-11-03 18:58:08
@@ -1546,7 +1546,9 @@
     Int *dead_cols ;
     Int set1 ;
     Int set2 ;
+#ifndef NDEBUG
     Int cs ;
+#endif
 
     int ok ;
 
@@ -1895,7 +1897,9 @@
             p [k] = col ;
             ASSERT (A [col] == EMPTY) ;
 
+#ifndef NDEBUG
 	    cs = CMEMBER (col) ;
+#endif
             ASSERT (k >= cset_start [cs] && k < cset_start [cs+1]) ;
 
             A [col] = k ;
@@ -1912,8 +1916,8 @@
             if (A [col] == EMPTY)
             {
                 k = Col [col].shared2.order ;
-		cs = CMEMBER (col) ;
 #ifndef NDEBUG
+		cs = CMEMBER (col) ;
                 dead_cols [cs]-- ;
 #endif
                 ASSERT (k >= cset_start [cs] && k < cset_start [cs+1]) ;
diff -ruN src/SuiteSparse/CHOLMOD/Check/cholmod_check.c src/SuiteSparse-patched/CHOLMOD/Check/cholmod_check.c
--- src/SuiteSparse/CHOLMOD/Check/cholmod_check.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Check/cholmod_check.c	2023-11-03 18:58:08
@@ -207,7 +207,7 @@
     double *Xwork ;
     Int *Flag, *Head ;
     int64_t mark ;
-    Int i, nrow, nmethods, ordering, xworksize, amd_backup, init_print ;
+    Int i, nrow, nmethods, ordering, xworksize, amd_backup ;
     const char *type = "common" ;
 
     /* ---------------------------------------------------------------------- */
@@ -215,8 +215,7 @@
     /* ---------------------------------------------------------------------- */
 
     RETURN_IF_NULL_COMMON (FALSE) ;
-    init_print = print ;
-
+    
     P2 ("%s", "\n") ;
 
     P1 ("CHOLMOD version %d", CHOLMOD_MAIN_VERSION) ;
@@ -953,7 +952,7 @@
 )
 {
     double *Xx, *Xz ;
-    Int i, j, d, nrow, ncol, nzmax, nz, init_print, count, xtype ;
+    Int i, j, d, nrow, ncol, nzmax, init_print, count, xtype ;
     const char *type = "dense" ;
 
     /* ---------------------------------------------------------------------- */
@@ -1021,7 +1020,6 @@
     {
 	init_print = print ;
 	ETC_START (count, 9) ;
-	nz = nrow * ncol ;
 	for (j = 0 ; j < ncol ; j++)
 	{
 	    ETC (j == ncol-1, count, 5) ;
@@ -1497,10 +1495,10 @@
     double *Lx, *Lz ;
     Int *Lp, *Li, *Lnz, *Lnext, *Lprev, *Perm, *ColCount, *Lpi, *Lpx, *Super,
 	*Ls ;
-    Int n, nzmax, j, p, pend, i, nz, ordering, space, is_monotonic, minor,
-	count, precise, init_print, ilast, lnz, head, tail, jprev, plast,
-	jnext, examine_super, nsuper, s, k1, k2, psi, psend, psx, nsrow, nscol,
-	ps2, psxend, ssize, xsize, maxcsize, maxesize, nsrow2, jj, ii, xtype ;
+    Int n, nzmax, j, p, pend, i, nz, space, is_monotonic, minor,
+	count, init_print, ilast, lnz, head, tail, jprev, plast,
+	jnext, examine_super, nsuper, s, k1, k2, psi, psend, psx = 0, nsrow, nscol,
+	psxend, ssize, xsize, maxcsize, maxesize, nsrow2, jj, ii, xtype ;
     Int check_Lpx ;
     const char *type = "factor" ;
 
@@ -1522,15 +1520,12 @@
 
     n = L->n ;
     minor = L->minor ;
-    ordering = L->ordering ;
     xtype = L->xtype ;
 
     Perm = L->Perm ;
     ColCount = L->ColCount ;
     lnz = 0 ;
 
-    precise = Common->precise ;
-
     P3 (" "ID"", n) ;
     P3 ("-by-"ID"", n) ;
 
@@ -1907,7 +1902,6 @@
 		nsrow = psend - psi ;
 		nscol = k2 - k1 ;
 		nsrow2 = nsrow - nscol ;
-		ps2 = psi + nscol ;
 
                 if (check_Lpx)
                 {
diff -ruN src/SuiteSparse/CHOLMOD/Check/cholmod_write.c src/SuiteSparse-patched/CHOLMOD/Check/cholmod_write.c
--- src/SuiteSparse/CHOLMOD/Check/cholmod_write.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Check/cholmod_write.c	2023-11-03 18:58:08
@@ -364,7 +364,7 @@
     double x = 0, z = 0 ;
     double *Ax, *Az ;
     Int *Ap, *Ai, *Anz, *Zp, *Zi, *Znz ;
-    Int nrow, ncol, is_complex, symmetry, i, j, q, iz, p, nz, is_binary, stype,
+    Int nrow, ncol, is_complex, i, j, q, iz, p, nz, is_binary, stype,
 	is_integer, asym, is_sym, xtype, apacked, zpacked, pend, qend, zsym ;
     int ok ;
 
@@ -536,7 +536,6 @@
 	    /* A is rectangular or unsymmetric */
 	    ok = ok && (fprintf (f, " general\n") > 0) ;
 	    is_sym = FALSE ;
-	    symmetry = CHOLMOD_MM_UNSYMMETRIC ;
 	    break ;
 
 	case CHOLMOD_MM_SYMMETRIC:
@@ -544,7 +543,6 @@
 	    /* A is symmetric */
 	    ok = ok && (fprintf (f, " symmetric\n") > 0) ;
 	    is_sym = TRUE ;
-	    symmetry = CHOLMOD_MM_SYMMETRIC ;
 	    break ;
 
 	case CHOLMOD_MM_HERMITIAN:
@@ -552,14 +550,12 @@
 	    /* A is Hermitian */
 	    ok = ok && (fprintf (f, " Hermitian\n") > 0) ;
 	    is_sym = TRUE ;
-	    symmetry = CHOLMOD_MM_HERMITIAN ;
 	    break ;
 
 	case CHOLMOD_MM_SKEW_SYMMETRIC:
 	    /* A is skew symmetric */
 	    ok = ok && (fprintf (f, " skew-symmetric\n") > 0) ;
 	    is_sym = TRUE ;
-	    symmetry = CHOLMOD_MM_SKEW_SYMMETRIC ;
 	    break ;
     }
 
diff -ruN src/SuiteSparse/CHOLMOD/Cholesky/cholmod_analyze.c src/SuiteSparse-patched/CHOLMOD/Cholesky/cholmod_analyze.c
--- src/SuiteSparse/CHOLMOD/Cholesky/cholmod_analyze.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Cholesky/cholmod_analyze.c	2023-11-03 18:58:08
@@ -405,10 +405,10 @@
 )
 {
     double lnz_best ;
-    Int *First, *Level, *Work4n, *Cmember, *CParent, *ColCount, *Lperm, *Parent,
+    Int *First, *Level, *Work4n, *ColCount, *Lperm, *Parent,
 	*Post, *Perm, *Lparent, *Lcolcount ;
     cholmod_factor *L ;
-    Int k, n, ordering, method, nmethods, status, default_strategy, ncol, uncol,
+    Int k, n, ordering, method, nmethods, status, default_strategy, uncol,
 	skip_analysis, skip_best ;
     Int amd_backup ;
     size_t s ;
@@ -431,7 +431,6 @@
     /* ---------------------------------------------------------------------- */
 
     n = A->nrow ;
-    ncol = A->ncol ;
     uncol = (A->stype == 0) ? (A->ncol) : 0 ;
 
     /* ---------------------------------------------------------------------- */
@@ -531,8 +530,10 @@
     /* note that this assignment means that cholmod_nested_dissection,
      * cholmod_ccolamd, and cholmod_camd can use only the first 4n+uncol
      * space in Common->Iwork */
-    Cmember = Post ;
-    CParent = Level ;
+#ifndef NPARTITION
+    Int *Cmember = Post ;
+    Int *CParent = Level ;
+#endif
 
     /* ---------------------------------------------------------------------- */
     /* allocate more workspace, and an empty simplicial symbolic factor */
diff -ruN src/SuiteSparse/CHOLMOD/Cholesky/cholmod_factorize.c src/SuiteSparse-patched/CHOLMOD/Cholesky/cholmod_factorize.c
--- src/SuiteSparse/CHOLMOD/Cholesky/cholmod_factorize.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Cholesky/cholmod_factorize.c	2023-11-03 18:58:08
@@ -104,7 +104,7 @@
 )
 {
     cholmod_sparse *S, *F, *A1, *A2 ;
-    Int nrow, ncol, stype, convert, n, nsuper, grow2, status ;
+    Int nrow, ncol, stype, convert, nsuper, grow2, status ;
     size_t s, t, uncol ;
     int ok = TRUE ;
 
@@ -119,7 +119,6 @@
     RETURN_IF_XTYPE_INVALID (L, CHOLMOD_PATTERN, CHOLMOD_ZOMPLEX, FALSE) ;
     nrow = A->nrow ;
     ncol = A->ncol ;
-    n = L->n ;
     stype = A->stype ;
     if (L->n != A->nrow)
     {
diff -ruN src/SuiteSparse/CHOLMOD/Cholesky/cholmod_solve.c src/SuiteSparse-patched/CHOLMOD/Cholesky/cholmod_solve.c
--- src/SuiteSparse/CHOLMOD/Cholesky/cholmod_solve.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Cholesky/cholmod_solve.c	2023-11-03 18:58:08
@@ -327,7 +327,10 @@
 )
 {
     double *Yx, *Yz, *Xx, *Xz ;
-    Int k2, nk, p, k, j, nrow, ncol, d, dj, j2 ;
+    Int k2, p, k, j, nrow, ncol, d, dj, j2 ;
+#ifndef NDEBUG
+    Int nk ;
+#endif
 
     /* ---------------------------------------------------------------------- */
     /* get inputs */
@@ -336,7 +339,9 @@
     ncol = X->ncol ;
     nrow = X->nrow ;
     k2 = MIN (k1+ncols, ncol) ;
+#ifndef NDEBUG
     nk = MAX (k2 - k1, 0) ;
+#endif
     d = X->d ;
     Xx = X->x ;
     Xz = X->z ;
diff -ruN src/SuiteSparse/CHOLMOD/Cholesky/t_cholmod_rowfac.c src/SuiteSparse-patched/CHOLMOD/Cholesky/t_cholmod_rowfac.c
--- src/SuiteSparse/CHOLMOD/Cholesky/t_cholmod_rowfac.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Cholesky/t_cholmod_rowfac.c	2023-11-03 18:58:08
@@ -45,11 +45,14 @@
 #ifdef ZOMPLEX
     double yz [1], lz [1], fz [1] ;
 #endif
-    double *Ax, *Az, *Lx, *Lz, *Wx, *Wz, *Fx, *Fz ;
+    double *Ax, *Lx, *Wx, *Fx ;
+#ifdef ZOMPLEX
+    double *Az, *Lz, *Wz, *Fz ;
+#endif
     Int *Ap, *Anz, *Ai, *Lp, *Lnz, *Li, *Lnext, *Flag, *Stack, *Fp, *Fi, *Fnz,
 	*Iwork ;
     Int i, p, k, t, pf, pfend, top, s, mark, pend, n, lnz, is_ll, multadds,
-	use_dbound, packed, stype, Fpacked, sorted, nzmax, len, parent ;
+	use_dbound, packed, stype, Fpacked, sorted, len, parent ;
 #ifndef REAL
     Int dk_imaginary ;
 #endif
@@ -71,7 +74,9 @@
 	Fp = NULL ;
 	Fi = NULL ;
 	Fx = NULL ;
+#ifdef ZOMPLEX
 	Fz = NULL ;
+#endif
 	Fnz = NULL ;
 	Fpacked = TRUE ;
     }
@@ -81,7 +86,9 @@
 	Fp = F->p ;
 	Fi = F->i ;
 	Fx = F->x ;
+#ifdef ZOMPLEX
 	Fz = F->z ;
+#endif
 	Fnz = F->nz ;
 	Fpacked = F->packed ;
     }
@@ -89,7 +96,9 @@
     Ap = A->p ;		/* size A->ncol+1, column pointers of A */
     Ai = A->i ;		/* size nz = Ap [A->ncol], row indices of A */
     Ax = A->x ;		/* size nz, numeric values of A */
+#ifdef ZOMPLEX
     Az = A->z ;
+#endif
     Anz = A->nz ;
     packed = A->packed ;
     sorted = A->sorted ;
@@ -142,8 +151,9 @@
     Lnext = L->next ;	/* size n+2 */
     Li = L->i ;		/* size L->nzmax, can change in size */
     Lx = L->x ;		/* size L->nzmax or 2*L->nzmax, can change in size */
-    Lz = L->z ;		/* size L->nzmax for zomplex case, can change in size */
-    nzmax = L->nzmax ;
+#ifdef ZOMPLEX
+	Lz = L->z ;		/* size L->nzmax for zomplex case, can change in size */
+#endif
     ASSERT (Lnz != NULL && Li != NULL && Lx != NULL) ;
 
     /* ---------------------------------------------------------------------- */
@@ -155,7 +165,9 @@
     Flag = Common->Flag ;	/* size n, Flag [i] < mark must hold */
     Wx = Common->Xwork ;	/* size n if real, 2*n if complex or 
 				 * zomplex.  Xwork [i] == 0 must hold. */
+#ifdef ZOMPLEX
     Wz = Wx + n ;		/* size n for zomplex case only */
+#endif
     mark = Common->mark ;
     ASSERT ((Int) Common->xworksize >= (L->xtype == CHOLMOD_REAL ? 1:2)*n) ;
 
@@ -391,7 +403,9 @@
 		}
 		Li = L->i ;		/* L->i, L->x, L->z may have moved */
 		Lx = L->x ;
+#ifdef ZOMPLEX
 		Lz = L->z ;
+#endif
 		p = Lp [i] + lnz ;	/* contents of L->p changed */
 		ASSERT (p < Lp [Lnext [i]]) ;
 	    }
diff -ruN src/SuiteSparse/CHOLMOD/Cholesky/t_cholmod_solve.c src/SuiteSparse-patched/CHOLMOD/Cholesky/t_cholmod_solve.c
--- src/SuiteSparse/CHOLMOD/Cholesky/t_cholmod_solve.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Cholesky/t_cholmod_solve.c	2023-11-03 18:58:08
@@ -60,7 +60,10 @@
 )
 {
     double d [1] ;
-    double *Lx, *Yx, *Yz ;
+    double *Lx, *Yx ;
+#ifdef ZOMPLEX
+	double *Yz ;
+#endif
     Int *Lp ;
     Int n, nrhs, k, p, k1, k2, kk, kkiters ;
 
@@ -75,7 +78,9 @@
     Lp = L->p ;
     Lx = L->x ;
     Yx = Y->x ;
+#ifdef ZOMPLEX
     Yz = Y->z ;
+#endif
     kkiters = Yseti ? ysetlen : n ;
     for (kk = 0 ; kk < kkiters ; kk++)
     {
diff -ruN src/SuiteSparse/CHOLMOD/Core/cholmod_change_factor.c src/SuiteSparse-patched/CHOLMOD/Core/cholmod_change_factor.c
--- src/SuiteSparse/CHOLMOD/Core/cholmod_change_factor.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Core/cholmod_change_factor.c	2023-11-03 18:58:08
@@ -259,13 +259,18 @@
     cholmod_common *Common
 )
 {
-    Int nsuper, xsize, ssize ;
+    Int nsuper, ssize ;
+#ifndef NDEBUG
+    Int xsize ;
+#endif
     Int *Lsuper, *Lpi, *Lpx, *Ls ;
     size_t nsuper1 ;
 
     ASSERT (L->xtype == CHOLMOD_PATTERN && !(L->is_super)) ;
 
+#ifndef NDEBUG
     xsize  = L->xsize ;
+#endif
     ssize  = L->ssize ;
     nsuper = L->nsuper ;
     nsuper1 = ((size_t) nsuper) + 1 ;
@@ -673,8 +678,7 @@
 {
     double grow0, grow1, xlen, xlnz ;
     void *newLi, *newLx, *newLz ;
-    double *Lx, *Lz ;
-    Int *Lp, *Li, *Lnz ;
+    Int *Lnz ;
     Int make_monotonic, grow2, n, j, lnz, len, grow, ok, make_ll, make_ldl ;
     size_t nzmax0 ;
 
@@ -688,10 +692,6 @@
     make_ldl = (!to_ll && L->is_ll) ;
 
     n = L->n ;
-    Lp = L->p ;
-    Li = L->i ;
-    Lx = L->x ;
-    Lz = L->z ;
     Lnz = L->nz ;
 
     grow = FALSE ;
@@ -820,19 +820,16 @@
     cholmod_common *Common
 )
 {
-    Int *Ls, *Lpi, *Lpx, *Super, *Li ;
-    Int n, lnz, s, nsuper, psi, psend, nsrow, nscol, k1, k2, erows ;
+    Int *Lpi, *Super, *Li ;
+    Int lnz, s, nsuper, psi, psend, nsrow, nscol, k1, k2, erows ;
 
     DEBUG (CHOLMOD(dump_factor) (L, "start LL super to simplicial", Common)) ;
     PRINT1 (("super -> simplicial (%d %d)\n", to_packed, to_ll)) ;
     ASSERT (L->xtype != CHOLMOD_PATTERN && L->is_ll && L->is_super) ;
     ASSERT (L->x != NULL && L->i == NULL) ;
 
-    n = L->n ;
     nsuper = L->nsuper ;
     Lpi = L->pi ;
-    Lpx = L->px ;
-    Ls = L->s ;
     Super = L->super ;
 
     /* Int overflow cannot occur since supernodal L already exists */
diff -ruN src/SuiteSparse/CHOLMOD/Core/cholmod_copy.c src/SuiteSparse-patched/CHOLMOD/Core/cholmod_copy.c
--- src/SuiteSparse/CHOLMOD/Core/cholmod_copy.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Core/cholmod_copy.c	2023-11-03 18:58:08
@@ -271,7 +271,7 @@
 )
 {
     cholmod_sparse *C ;
-    Int nrow, ncol, up, lo, values, diag, astype ;
+    Int nrow, ncol, values, diag, astype ;
 
     /* ---------------------------------------------------------------------- */
     /* check inputs */
@@ -310,8 +310,6 @@
     diag = (mode >= 0) ;
     astype = SIGN (A->stype) ;
     stype = SIGN (stype) ;
-    up = (astype > 0) ;
-    lo = (astype < 0) ;
 
     /* ---------------------------------------------------------------------- */
     /* copy the matrix */
diff -ruN src/SuiteSparse/CHOLMOD/Core/cholmod_dense.c src/SuiteSparse-patched/CHOLMOD/Core/cholmod_dense.c
--- src/SuiteSparse/CHOLMOD/Core/cholmod_dense.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Core/cholmod_dense.c	2023-11-03 18:58:08
@@ -297,8 +297,8 @@
 )
 {
     cholmod_dense *X ;
-    double *Xx, *Xz ;
-    Int i, n, nz ;
+    double *Xx ;
+    Int i, n ;
 
     /* ---------------------------------------------------------------------- */
     /* allocate a dense matrix and set it to the identity matrix */
@@ -311,9 +311,7 @@
 	return (NULL) ;	    /* NULL Common, out of memory, or inputs invalid */
     }
 
-    nz = MAX (1, nrow*ncol) ;
     Xx = X->x ;
-    Xz = X->z ;
 
     n = MIN (nrow, ncol) ;
 
diff -ruN src/SuiteSparse/CHOLMOD/Core/cholmod_memory.c src/SuiteSparse-patched/CHOLMOD/Core/cholmod_memory.c
--- src/SuiteSparse/CHOLMOD/Core/cholmod_memory.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Core/cholmod_memory.c	2023-11-03 18:58:08
@@ -118,7 +118,6 @@
 )
 {
     void *p ;
-    size_t s ;
     /*
     int ok = TRUE ;
     */
@@ -308,7 +307,6 @@
 {
     size_t nold = (*n) ;
     void *pnew ;
-    size_t s ;
     int ok = TRUE ;
 
     RETURN_IF_NULL_COMMON (NULL) ;
diff -ruN src/SuiteSparse/CHOLMOD/Core/cholmod_sparse.c src/SuiteSparse-patched/CHOLMOD/Core/cholmod_sparse.c
--- src/SuiteSparse/CHOLMOD/Core/cholmod_sparse.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Core/cholmod_sparse.c	2023-11-03 18:58:08
@@ -483,7 +483,7 @@
     double *Ax, *Cx, *Az, *Cz ;
     Int *Ap, *Ai, *Anz, *Cp, *Ci, *Cnz ;
     cholmod_sparse *C ;
-    Int p, pend, j, ncol, packed, nzmax, nz, xtype ;
+    Int p, pend, j, ncol, packed, nz, xtype ;
 
     /* ---------------------------------------------------------------------- */
     /* check inputs */
@@ -505,7 +505,6 @@
     /* ---------------------------------------------------------------------- */
 
     ncol = A->ncol ;
-    nzmax = A->nzmax ;
     packed = A->packed ;
     Ap = A->p ;
     Ai = A->i ;
diff -ruN src/SuiteSparse/CHOLMOD/Core/cholmod_triplet.c src/SuiteSparse-patched/CHOLMOD/Core/cholmod_triplet.c
--- src/SuiteSparse/CHOLMOD/Core/cholmod_triplet.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Core/cholmod_triplet.c	2023-11-03 18:58:08
@@ -338,8 +338,8 @@
 )
 {
     cholmod_sparse *R, *A = NULL ;
-    Int *Wj, *Rp, *Ri, *Rnz, *Ti, *Tj ;
-    Int i, j, p, k, stype, nrow, ncol, nz, ok ;
+    Int *Wj, *Rp, *Rnz, *Ti, *Tj ;
+    Int i, j, p, k, stype, nrow, ncol, nz ;
     size_t anz = 0 ;
 
     /* ---------------------------------------------------------------------- */
@@ -394,7 +394,6 @@
     }
 
     Rp = R->p ;
-    Ri = R->i ;
     Rnz = R->nz ;
 
     /* ---------------------------------------------------------------------- */
@@ -518,11 +517,11 @@
 
     if (stype)
     {
-	ok = CHOLMOD(transpose_sym) (R, 1, NULL, A, Common) ;
+	CHOLMOD(transpose_sym) (R, 1, NULL, A, Common) ;
     }
     else
     {
-	ok = CHOLMOD(transpose_unsym) (R, 1, NULL, NULL, 0, A, Common) ; 
+	CHOLMOD(transpose_unsym) (R, 1, NULL, NULL, 0, A, Common) ; 
     }
 
     CHOLMOD(free_sparse) (&R, Common) ;
diff -ruN src/SuiteSparse/CHOLMOD/Core/t_cholmod_change_factor.c src/SuiteSparse-patched/CHOLMOD/Core/t_cholmod_change_factor.c
--- src/SuiteSparse/CHOLMOD/Core/t_cholmod_change_factor.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Core/t_cholmod_change_factor.c	2023-11-03 18:58:08
@@ -35,7 +35,10 @@
 )
 {
     double xlen, dj [1], ljj [1], lj2 [1] ;
-    double *Lx, *Lz ;
+    double *Lx ;
+#ifdef ZOMPLEX
+	double *Lz ;
+#endif
     Int *Lp, *Li, *Lnz ;
     Int n, j, len, pnew, pold, k, p, pend ;
 
@@ -43,7 +46,9 @@
     Lp = L->p ;
     Li = L->i ;
     Lx = L->x ;
+#ifdef ZOMPLEX
     Lz = L->z ;
+#endif
     Lnz = L->nz ;
 
     if (make_ll)
diff -ruN src/SuiteSparse/CHOLMOD/Core/t_cholmod_dense.c src/SuiteSparse-patched/CHOLMOD/Core/t_cholmod_dense.c
--- src/SuiteSparse/CHOLMOD/Core/t_cholmod_dense.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Core/t_cholmod_dense.c	2023-11-03 18:58:08
@@ -25,7 +25,13 @@
     cholmod_common *Common
 )
 {
-    double *Ax, *Xx, *Az, *Xz ;
+    double *Xx ;
+#ifndef PATTERN
+    double *Ax ;
+#endif
+#ifdef ZOMPLEX
+    double *Az, *Xz ;
+#endif
     Int *Ap, *Ai, *Anz ;
     cholmod_dense *X ;
     Int i, j, p, pend, nrow, ncol, packed ;
@@ -39,8 +45,12 @@
     packed = A->packed ;
     Ap = A->p ;
     Ai = A->i ;
+#ifndef PATTERN
     Ax = A->x ;
+#endif
+#ifdef ZOMPLEX
     Az = A->z ;
+#endif
     Anz = A->nz ;
 
     /* ---------------------------------------------------------------------- */
@@ -53,7 +63,9 @@
 	return (NULL) ;	    /* out of memory */
     }
     Xx = X->x ;
+#ifdef ZOMPLEX
     Xz = X->z ;
+#endif
 
     /* ---------------------------------------------------------------------- */
     /* copy into dense matrix */
@@ -131,7 +143,10 @@
     cholmod_common *Common
 )
 {
-    double *Xx, *Cx, *Xz, *Cz ;
+    double *Xx, *Cx ;
+#ifdef ZOMPLEX
+    double *Xz, *Cz ;
+#endif
     Int *Ci, *Cp ;
     cholmod_sparse *C ;
     Int i, j, p, d, nrow, ncol, nz ;
@@ -144,7 +159,9 @@
     ncol = X->ncol ;
     d = X->d ;
     Xx = X->x ;
+#ifdef ZOMPLEX
     Xz = X->z ;
+#endif
 
     /* ---------------------------------------------------------------------- */
     /* count the number of nonzeros in the result */
@@ -175,7 +192,9 @@
     Cp = C->p ;
     Ci = C->i ;
     Cx = C->x ;
+#ifdef ZOMPLEX
     Cz = C->z ;
+#endif
 
     /* ---------------------------------------------------------------------- */
     /* copy the dense matrix X into the sparse matrix C */
@@ -224,7 +243,10 @@
     cholmod_dense *Y	/* copy of matrix X */
 )
 {
-    double *Xx, *Xz, *Yx, *Yz ;
+    double *Xx, *Yx ;
+#ifdef ZOMPLEX
+    double *Xz, *Yz ;
+#endif
     Int i, j, nrow, ncol, dy, dx ;
 
     /* ---------------------------------------------------------------------- */
@@ -232,9 +254,13 @@
     /* ---------------------------------------------------------------------- */
 
     Xx = X->x ;
+#ifdef ZOMPLEX
     Xz = X->z ;
+#endif
     Yx = Y->x ;
+#ifdef ZOMPLEX
     Yz = Y->z ;
+#endif
     dx = X->d ;
     dy = Y->d ;
     nrow = X->nrow ;
diff -ruN src/SuiteSparse/CHOLMOD/Core/t_cholmod_transpose.c src/SuiteSparse-patched/CHOLMOD/Core/t_cholmod_transpose.c
--- src/SuiteSparse/CHOLMOD/Core/t_cholmod_transpose.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Core/t_cholmod_transpose.c	2023-11-03 18:58:08
@@ -40,9 +40,18 @@
     cholmod_common *Common
 )
 {
-    double *Ax, *Az, *Fx, *Fz ;
-    Int *Ap, *Anz, *Ai, *Fp, *Fnz, *Fj, *Wi, *Iwork ;
-    Int j, p, pend, nrow, ncol, Apacked, use_fset, fp, Fpacked, jj, permute ;
+#ifndef PATTERN
+    double *Ax, *Fx ;
+#endif
+#ifdef ZOMPLEX
+    double *Az, *Fz ;
+#endif
+    Int *Ap, *Anz, *Ai, *Fj, *Wi, *Iwork ;
+    Int j, p, pend, ncol, Apacked, use_fset, fp, jj ;
+#ifndef NDEBUG
+    Int *Fnz ;
+    Int Fpacked ;
+#endif
 
     /* ---------------------------------------------------------------------- */
     /* check inputs */
@@ -60,25 +69,31 @@
     /* ---------------------------------------------------------------------- */
 
     use_fset = (fset != NULL) ;
-    nrow = A->nrow ;
     ncol = A->ncol ;
 
     Ap = A->p ;		/* size A->ncol+1, column pointers of A */
     Ai = A->i ;		/* size nz = Ap [A->ncol], row indices of A */
+#ifndef PATTERN
     Ax = A->x ;		/* size nz, real values of A */
+#endif
+#ifdef ZOMPLEX
     Az = A->z ;		/* size nz, imag values of A */
+#endif
     Anz = A->nz ;
     Apacked = A->packed ;
     ASSERT (IMPLIES (!Apacked, Anz != NULL)) ;
 
-    permute = (Perm != NULL) ;
-
-    Fp = F->p ;		/* size A->nrow+1, row pointers of F */
     Fj = F->i ;		/* size nz, column indices of F */
-    Fx = F->x ;		/* size nz, real values of F */
+#ifndef PATTERN
+	Fx = F->x ;		/* size nz, real values of F */
+#endif
+#ifdef ZOMPLEX
     Fz = F->z ;		/* size nz, imag values of F */
+#endif
+#ifndef NDEBUG
     Fnz = F->nz ;
     Fpacked = F->packed ;
+#endif
     ASSERT (IMPLIES (!Fpacked, Fnz != NULL)) ;
 
     nf = (use_fset) ? nf : ncol ;
@@ -137,8 +152,13 @@
     cholmod_common *Common
 )
 {
-    double *Ax, *Az, *Fx, *Fz ;
-    Int *Ap, *Anz, *Ai, *Fp, *Fj, *Wi, *Pinv, *Iwork ;
+#ifndef PATTERN
+    double *Ax, *Fx ;
+#endif
+#ifdef ZOMPLEX
+    double *Az, *Fz ;
+#endif
+    Int *Ap, *Anz, *Ai, *Fj, *Wi, *Pinv, *Iwork ;
     Int p, pend, packed, fp, upper, permute, jold, n, i, j, iold ;
 
     /* ---------------------------------------------------------------------- */
@@ -160,17 +180,24 @@
     n = A->nrow ;
     Ap = A->p ;		/* size A->ncol+1, column pointers of A */
     Ai = A->i ;		/* size nz = Ap [A->ncol], row indices of A */
+#ifndef PATTERN
     Ax = A->x ;		/* size nz, real values of A */
+#endif
+#ifdef ZOMPLEX
     Az = A->z ;		/* size nz, imag values of A */
+#endif
     Anz = A->nz ;
     packed = A->packed ;
     ASSERT (IMPLIES (!packed, Anz != NULL)) ;
     upper = (A->stype > 0) ;
 
-    Fp = F->p ;		/* size A->nrow+1, row pointers of F */
     Fj = F->i ;		/* size nz, column indices of F */
+#ifndef PATTERN
     Fx = F->x ;		/* size nz, real values of F */
+#endif
+#ifdef ZOMPLEX
     Fz = F->z ;		/* size nz, imag values of F */
+#endif
 
     /* ---------------------------------------------------------------------- */
     /* get workspace */
diff -ruN src/SuiteSparse/CHOLMOD/Core/t_cholmod_triplet.c src/SuiteSparse-patched/CHOLMOD/Core/t_cholmod_triplet.c
--- src/SuiteSparse/CHOLMOD/Core/t_cholmod_triplet.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Core/t_cholmod_triplet.c	2023-11-03 18:58:08
@@ -26,7 +26,12 @@
     cholmod_common *Common
 )
 {
-    double *Rx, *Rz, *Tx, *Tz ;
+#ifndef PATTERN
+    double *Rx, *Tx ;
+#endif
+#ifdef ZOMPLEX
+    double *Rz, *Tz ;
+#endif
     Int *Wj, *Rp, *Ri, *Rnz, *Ti, *Tj  ;
     Int i, j, p, p1, p2, pdest, pj, k, stype, nrow, ncol, nz ;
     size_t anz ;
@@ -41,13 +46,21 @@
     Rp = R->p ;
     Ri = R->i ;
     Rnz = R->nz ;
+#ifndef PATTERN
     Rx = R->x ;
+#endif
+#ifdef ZOMPLEX
     Rz = R->z ;
+#endif
 
     Ti = T->i ;
     Tj = T->j ;
+#ifndef PATTERN
     Tx = T->x ;
+#endif
+#ifdef ZOMPLEX
     Tz = T->z ;
+#endif
     nz = T->nnz ;
     nrow = T->nrow ;
     ncol = T->ncol ;
diff -ruN src/SuiteSparse/CHOLMOD/MatrixOps/t_cholmod_sdmult.c src/SuiteSparse-patched/CHOLMOD/MatrixOps/t_cholmod_sdmult.c
--- src/SuiteSparse/CHOLMOD/MatrixOps/t_cholmod_sdmult.c	2023-11-03 19:05:53
+++ src/SuiteSparse-patched/CHOLMOD/MatrixOps/t_cholmod_sdmult.c	2023-11-03 18:58:08
@@ -47,10 +47,16 @@
     double betaz [1], alphaz [1] ;
 #endif
 
-    double *Ax, *Az, *Xx, *Xz, *Yx, *Yz, *w, *Wz ;
+    double *Ax, *Xx, *Yx, *w ;
+#ifdef ZOMPLEX
+    double *Az, *Xz, *Yz, *Wz ;
+#endif
     Int *Ap, *Ai, *Anz ;
-    size_t nx, ny, dx, dy ;
-    Int packed, nrow, ncol, j, k, p, pend, kcol, i ;
+    size_t ny, dx, dy ;
+#ifdef ZOMPLEX
+    size_t nx ;
+#endif
+    Int packed, ncol, j, k, p, pend, kcol, i ;
 
     /* ---------------------------------------------------------------------- */
     /* get inputs */
@@ -62,30 +68,41 @@
 #endif
 
     ny = transpose ? A->ncol : A->nrow ;	/* required length of Y */
+#ifdef ZOMPLEX
     nx = transpose ? A->nrow : A->ncol ;	/* required length of X */
+#endif
 
-    nrow = A->nrow ;
     ncol = A->ncol ;
 
     Ap  = A->p ;
     Anz = A->nz ;
     Ai  = A->i ;
     Ax  = A->x ;
+#ifdef ZOMPLEX
     Az  = A->z ;
+#endif
     packed = A->packed ;
     Xx = X->x ;
+#ifdef ZOMPLEX
     Xz = X->z ;
+#endif
     Yx = Y->x ;
+#ifdef ZOMPLEX
     Yz = Y->z ;
+#endif
     kcol = X->ncol ;
     dy = Y->d ;
     dx = X->d ;
     if (A->stype != 0 && kcol >= 4) {
     w = W ;
+#ifdef ZOMPLEX
     Wz = W + 4*nx ;
+#endif
     } else {
     w = NULL ;
+#ifdef ZOMPLEX
     Wz = NULL ;
+#endif
     }
 
     /* ---------------------------------------------------------------------- */
@@ -130,7 +147,9 @@
     /* ---------------------------------------------------------------------- */
 
     Yx = Y->x ;
+#ifdef ZOMPLEX
     Yz = Y->z ;
+#endif
 
     k = 0 ;
 
diff -ruN src/SuiteSparse/CHOLMOD/Modify/cholmod_updown.c src/SuiteSparse-patched/CHOLMOD/Modify/cholmod_updown.c
--- src/SuiteSparse/CHOLMOD/Modify/cholmod_updown.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Modify/cholmod_updown.c	2023-11-03 18:58:08
@@ -428,7 +428,10 @@
     double xj, fl ;
     double *Lx, *W, *Xx, *Nx ;
     Int *Li, *Lp, *Lnz, *Cp, *Ci, *Cnz, *Head, *Flag, *Stack, *Lnext, *Iwork,
-	*Set_ps1 [32], *Set_ps2 [32], *ps1, *ps2 ;
+	*Set_ps1 [32], *Set_ps2 [32], *ps2 ;
+#ifndef NDEBUG
+	Int *ps1 ;
+#endif
     size_t maxrank ;
     Path_type OrderedPath [32], Path [32] ;
     Int n, wdim, k1, k2, npaths, i, j, row, packed, ccol, p, cncol, do_solve,
@@ -591,7 +594,9 @@
     /* entire rank-cncol update, done as a sequence of rank-k updates */
     /* ---------------------------------------------------------------------- */
 
+#ifndef NDEBUG
     ps1 = NULL ;
+#endif
     ps2 = NULL ;
 
     for (k1 = 0 ; k1 < cncol ; k1 += k)
@@ -1125,7 +1130,9 @@
 
 	    if (nsets > 0)
 	    {
+#ifndef NDEBUG
 		ps1 = Set_ps1 [0] ;
+#endif
 		ps2 = Set_ps2 [0] ;
 	    }
 
diff -ruN src/SuiteSparse/CHOLMOD/Partition/cholmod_metis.c src/SuiteSparse-patched/CHOLMOD/Partition/cholmod_metis.c
--- src/SuiteSparse/CHOLMOD/Partition/cholmod_metis.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Partition/cholmod_metis.c	2023-11-03 18:58:08
@@ -590,7 +590,7 @@
     idx_t *Mp, *Mi, *Mperm, *Miperm ;
     cholmod_sparse *B ;
     Int i, j, n, nz, p, identity, uncol ;
-    idx_t nn, zero = 0 ;
+    idx_t nn ;
     size_t n1, s ;
     int ok = TRUE ;
 
diff -ruN src/SuiteSparse/CHOLMOD/Partition/cholmod_nesdis.c src/SuiteSparse-patched/CHOLMOD/Partition/cholmod_nesdis.c
--- src/SuiteSparse/CHOLMOD/Partition/cholmod_nesdis.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Partition/cholmod_nesdis.c	2023-11-03 18:58:08
@@ -686,9 +686,12 @@
     cholmod_common *Common
 )
 {
-    Int n, mark, cj, j, sj, sn, p, i, snode, pstart, pdest, pend, nd_components,
+    Int mark, cj, j, sj, sn, p, i, snode, pstart, pdest, pend, nd_components,
 	part, first, save_mark ;
     Int *Bp, *Bi, *Flag ;
+#ifndef NDEBUG
+    Int n ;
+#endif
 
     /* ---------------------------------------------------------------------- */
     /* get workspace */
@@ -707,7 +710,9 @@
 
     Bp = B->p ;
     Bi = B->i ;
+#ifndef NDEBUG
     n = B->nrow ;
+#endif
     ASSERT (cnode >= EMPTY && cnode < n) ;
     ASSERT (IMPLIES (cnode >= 0, Flag [cnode] < EMPTY)) ;
 
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/gk_mkpqueue.h src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/gk_mkpqueue.h
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/gk_mkpqueue.h	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/gk_mkpqueue.h	2023-11-03 19:02:06
@@ -11,6 +11,38 @@
 #ifndef _GK_MKPQUEUE_H
 #define _GK_MKPQUEUE_H
 
+#ifndef NDEBUG
+#define DO_CHECKHEAP\
+do {\
+  gk_idx_t i, j;\
+  size_t nnodes;\
+  gk_idx_t *locator;\
+  KVT *heap;\
+\
+  heap    = queue->heap;\
+  locator = queue->locator;\
+  nnodes  = queue->nnodes;\
+\
+  if (nnodes == 0)\
+    return 1;\
+\
+  ASSERT(locator[heap[0].val] == 0);\
+  for (i=1; i<nnodes; i++) {\
+    ASSERT(locator[heap[i].val] == i);\
+    ASSERT(!KEY_LT(heap[i].key, heap[(i-1)/2].key));\
+  }\
+  for (i=1; i<nnodes; i++)\
+    ASSERT(!KEY_LT(heap[i].key, heap[0].key));\
+\
+  for (i=0; i<queue->maxnodes; i++) {\
+    if (locator[i] != -1)\
+      j++;\
+  }\
+  ASSERTP(j == nnodes, ("%jd %jd\n", (intmax_t)j, (intmax_t)nnodes));\
+} while (0)
+#else
+#define DO_CHECKHEAP
+#endif
 
 #define GK_MKPQUEUE(FPRFX, PQT, KVT, KT, VT, KVMALLOC, KMAX, KEY_LT)\
 /*************************************************************************/\
@@ -380,32 +412,7 @@
 /**************************************************************************/\
 int FPRFX ## CheckHeap(PQT *queue)\
 {\
-  gk_idx_t i, j;\
-  size_t nnodes;\
-  gk_idx_t *locator;\
-  KVT *heap;\
-\
-  heap    = queue->heap;\
-  locator = queue->locator;\
-  nnodes  = queue->nnodes;\
-\
-  if (nnodes == 0)\
-    return 1;\
-\
-  ASSERT(locator[heap[0].val] == 0);\
-  for (i=1; i<nnodes; i++) {\
-    ASSERT(locator[heap[i].val] == i);\
-    ASSERT(!KEY_LT(heap[i].key, heap[(i-1)/2].key));\
-  }\
-  for (i=1; i<nnodes; i++)\
-    ASSERT(!KEY_LT(heap[i].key, heap[0].key));\
-\
-  for (j=i=0; i<queue->maxnodes; i++) {\
-    if (locator[i] != -1)\
-      j++;\
-  }\
-  ASSERTP(j == nnodes, ("%jd %jd\n", (intmax_t)j, (intmax_t)nnodes));\
-\
+  DO_CHECKHEAP;\
   return 1;\
 }\
 
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/balance.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/balance.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/balance.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/balance.c	2023-11-03 18:58:08
@@ -40,7 +40,7 @@
 **************************************************************************/
 void Bnd2WayBalance(ctrl_t *ctrl, graph_t *graph, real_t *ntpwgts)
 {
-  idx_t i, ii, j, k, kwgt, nvtxs, nbnd, nswaps, from, to, pass, me, tmp;
+  idx_t i, ii, j, k, kwgt, nvtxs, nbnd, nswaps, from, to, tmp;
   idx_t *xadj, *vwgt, *adjncy, *adjwgt, *where, *id, *ed, *bndptr, *bndind, *pwgts;
   idx_t *moved, *perm;
   rpq_t *queue;
@@ -168,7 +168,7 @@
 **************************************************************************/
 void General2WayBalance(ctrl_t *ctrl, graph_t *graph, real_t *ntpwgts)
 {
-  idx_t i, ii, j, k, kwgt, nvtxs, nbnd, nswaps, from, to, pass, me, tmp;
+  idx_t i, ii, j, k, kwgt, nvtxs, nbnd, nswaps, from, to, tmp;
   idx_t *xadj, *vwgt, *adjncy, *adjwgt, *where, *id, *ed, *bndptr, *bndind, *pwgts;
   idx_t *moved, *perm;
   rpq_t *queue;
@@ -280,8 +280,8 @@
 **************************************************************************/
 void McGeneral2WayBalance(ctrl_t *ctrl, graph_t *graph, real_t *ntpwgts)
 {
-  idx_t i, ii, j, k, l, kwgt, nvtxs, ncon, nbnd, nswaps, from, to, pass, 
-        me, limit, tmp, cnum;
+  idx_t i, ii, j, k, l, kwgt, nvtxs, ncon, nbnd, nswaps, from, to, 
+        limit, tmp, cnum;
   idx_t *xadj, *adjncy, *vwgt, *adjwgt, *where, *pwgts, *id, *ed, *bndptr, *bndind;
   idx_t *moved, *swaps, *perm, *qnum, *qsizes;
   idx_t higain, mincut, newcut, mincutorder;
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/coarsen.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/coarsen.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/coarsen.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/coarsen.c	2023-11-03 18:58:08
@@ -21,7 +21,7 @@
 /*************************************************************************/
 graph_t *CoarsenGraph(ctrl_t *ctrl, graph_t *graph)
 {
-  idx_t i, eqewgts, level=0;
+  idx_t i, eqewgts;
 
   IFSET(ctrl->dbglvl, METIS_DBG_TIME, gk_startcputimer(ctrl->CoarsenTmr));
 
@@ -62,7 +62,6 @@
 
     graph = graph->coarser;
     eqewgts = 0;
-    level++;
 
     ASSERT(CheckGraph(graph, 0, 1));
 
@@ -148,8 +147,8 @@
 /**************************************************************************/
 idx_t Match_RM(ctrl_t *ctrl, graph_t *graph)
 {
-  idx_t i, pi, ii, j, jj, jjinc, k, nvtxs, ncon, cnvtxs, maxidx, last_unmatched;
-  idx_t *xadj, *vwgt, *adjncy, *adjwgt, *maxvwgt;
+  idx_t i, pi, j, k, nvtxs, ncon, cnvtxs, maxidx, last_unmatched;
+  idx_t *xadj, *vwgt, *adjncy, *maxvwgt;
   idx_t *match, *cmap, *perm;
   size_t nunmatched=0;
 
@@ -162,7 +161,6 @@
   xadj   = graph->xadj;
   vwgt   = graph->vwgt;
   adjncy = graph->adjncy;
-  adjwgt = graph->adjwgt;
   cmap   = graph->cmap;
 
   maxvwgt  = ctrl->maxvwgt;
@@ -275,7 +273,7 @@
 /**************************************************************************/
 idx_t Match_SHEM(ctrl_t *ctrl, graph_t *graph)
 {
-  idx_t i, pi, ii, j, jj, jjinc, k, nvtxs, ncon, cnvtxs, maxidx, maxwgt, 
+  idx_t i, pi, j, k, nvtxs, ncon, cnvtxs, maxidx, maxwgt, 
         last_unmatched, avgdegree;
   idx_t *xadj, *vwgt, *adjncy, *adjwgt, *maxvwgt;
   idx_t *match, *cmap, *degrees, *perm, *tperm;
@@ -437,7 +435,7 @@
 idx_t Match_2HopAny(ctrl_t *ctrl, graph_t *graph, idx_t *perm, idx_t *match, 
           idx_t cnvtxs, size_t *r_nunmatched, size_t maxdegree)
 {
-  idx_t i, pi, ii, j, jj, k, nvtxs;
+  idx_t i, pi, j, jj, nvtxs;
   idx_t *xadj, *adjncy, *colptr, *rowind;
   idx_t *cmap;
   size_t nunmatched;
@@ -516,7 +514,7 @@
 idx_t Match_2HopAll(ctrl_t *ctrl, graph_t *graph, idx_t *perm, idx_t *match, 
           idx_t cnvtxs, size_t *r_nunmatched, size_t maxdegree)
 {
-  idx_t i, pi, pk, ii, j, jj, k, nvtxs, mask, idegree;
+  idx_t i, pi, pk, j, jj, k, nvtxs, mask, idegree;
   idx_t *xadj, *adjncy;
   idx_t *cmap, *mark;
   ikv_t *keys;
@@ -621,7 +619,7 @@
 void CreateCoarseGraph(ctrl_t *ctrl, graph_t *graph, idx_t cnvtxs, 
          idx_t *match)
 {
-  idx_t j, jj, k, kk, l, m, istart, iend, nvtxs, nedges, ncon, cnedges, 
+  idx_t j, jj, k, kk, m, istart, iend, nvtxs, nedges, ncon, cnedges, 
         v, u, mask, dovsize;
   idx_t *xadj, *vwgt, *vsize, *adjncy, *adjwgt;
   idx_t *cmap, *htable;
@@ -932,7 +930,7 @@
 void CreateCoarseGraphPerm(ctrl_t *ctrl, graph_t *graph, idx_t cnvtxs, 
          idx_t *match, idx_t *perm)
 {
-  idx_t i, j, jj, k, kk, l, m, istart, iend, nvtxs, nedges, ncon, cnedges, 
+  idx_t i, j, jj, k, kk, m, istart, iend, nvtxs, nedges, ncon, cnedges, 
         v, u, mask, dovsize;
   idx_t *xadj, *vwgt, *vsize, *adjncy, *adjwgt;
   idx_t *cmap, *htable;
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/compress.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/compress.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/compress.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/compress.c	2023-11-03 18:58:08
@@ -151,7 +151,7 @@
              idx_t *vwgt, idx_t *iperm, real_t factor)
 {
   idx_t i, j, k, l, nlarge, pnvtxs, pnedges;
-  idx_t *pxadj, *padjncy, *padjwgt, *pvwgt;
+  idx_t *pxadj, *padjncy, *pvwgt;
   idx_t *perm;
   graph_t *graph=NULL;
 
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/contig.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/contig.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/contig.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/contig.c	2023-11-03 18:58:08
@@ -32,7 +32,7 @@
 idx_t FindPartitionInducedComponents(graph_t *graph, idx_t *where, 
           idx_t *cptr, idx_t *cind)
 {
-  idx_t i, ii, j, jj, k, me=0, nvtxs, first, last, nleft, ncmps;
+  idx_t i, j, k, me=0, nvtxs, first, last, nleft, ncmps;
   idx_t *xadj, *adjncy;
   idx_t *touched, *perm, *todo;
   idx_t mustfree_ccsr=0, mustfree_where=0;
@@ -267,7 +267,7 @@
 idx_t FindSepInducedComponents(ctrl_t *ctrl, graph_t *graph, idx_t *cptr, 
           idx_t *cind)
 {
-  idx_t i, j, k, nvtxs, first, last, nleft, ncmps, wgt;
+  idx_t i, j, k, nvtxs, first, last, nleft, ncmps;
   idx_t *xadj, *adjncy, *where, *touched, *queue;
 
   nvtxs  = graph->nvtxs;
@@ -335,14 +335,13 @@
 /*************************************************************************/
 void EliminateComponents(ctrl_t *ctrl, graph_t *graph)
 {
-  idx_t i, ii, j, jj, k, me, nparts, nvtxs, ncon, ncmps, other, 
+  idx_t i, ii, j, jj, me, nparts, nvtxs, ncon, ncmps, 
         ncand, target;
   idx_t *xadj, *adjncy, *vwgt, *adjwgt, *where, *pwgts;
   idx_t *cptr, *cind, *cpvec, *pcptr, *pcind, *cwhere;
   idx_t cid, bestcid, *cwgt, *bestcwgt;
   idx_t ntodo, oldntodo, *todo;
   rkv_t *cand;
-  real_t *tpwgts;
   idx_t *vmarker=NULL, *pmarker=NULL, *modind=NULL;  /* volume specific work arrays */
 
   WCOREPUSH;
@@ -358,7 +357,6 @@
   pwgts = graph->pwgts;
 
   nparts = ctrl->nparts;
-  tpwgts = ctrl->tpwgts;
 
   cptr = iwspacemalloc(ctrl, nvtxs+1);
   cind = iwspacemalloc(ctrl, nvtxs);
@@ -531,12 +529,11 @@
 void MoveGroupContigForCut(ctrl_t *ctrl, graph_t *graph, idx_t to, idx_t gid, 
          idx_t *ptr, idx_t *ind)
 {
-  idx_t i, ii, iii, j, jj, k, l, nvtxs, nbnd, from, me;
+  idx_t i, ii, iii, j, k, nbnd, from, me;
   idx_t *xadj, *adjncy, *adjwgt, *where, *bndptr, *bndind;
   ckrinfo_t *myrinfo;
   cnbr_t *mynbrs;
 
-  nvtxs  = graph->nvtxs;
   xadj   = graph->xadj;
   adjncy = graph->adjncy;
   adjwgt = graph->adjwgt;
@@ -602,12 +599,11 @@
          idx_t *ptr, idx_t *ind, idx_t *vmarker, idx_t *pmarker, 
          idx_t *modind)
 {
-  idx_t i, ii, iii, j, jj, k, l, nvtxs, from, me, other, xgain;
+  idx_t i, ii, iii, j, k, l, from, other, xgain;
   idx_t *xadj, *vsize, *adjncy, *where;
   vkrinfo_t *myrinfo, *orinfo;
   vnbr_t *mynbrs, *onbrs;
 
-  nvtxs  = graph->nvtxs;
   xadj   = graph->xadj;
   vsize  = graph->vsize;
   adjncy = graph->adjncy;
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/debug.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/debug.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/debug.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/debug.c	2023-11-03 18:58:08
@@ -47,7 +47,7 @@
 /*************************************************************************/
 idx_t ComputeVolume(graph_t *graph, idx_t *where)
 {
-  idx_t i, j, k, me, nvtxs, nparts, totalv;
+  idx_t i, j, k, nvtxs, nparts, totalv;
   idx_t *xadj, *adjncy, *vsize, *marker;
 
 
@@ -120,6 +120,7 @@
 /*************************************************************************/
 idx_t CheckBnd(graph_t *graph) 
 {
+#ifndef NDEBUG
   idx_t i, j, nvtxs, nbnd;
   idx_t *xadj, *adjncy, *where, *bndptr, *bndind;
 
@@ -145,6 +146,7 @@
   }
 
   ASSERTP(nbnd == graph->nbnd, ("%"PRIDX" %"PRIDX"\n", nbnd, graph->nbnd));
+#endif
 
   return 1;
 }
@@ -157,6 +159,7 @@
 /*************************************************************************/
 idx_t CheckBnd2(graph_t *graph) 
 {
+#ifndef NDEBUG
   idx_t i, j, nvtxs, nbnd, id, ed;
   idx_t *xadj, *adjncy, *where, *bndptr, *bndind;
 
@@ -183,6 +186,7 @@
   }
 
   ASSERTP(nbnd == graph->nbnd, ("%"PRIDX" %"PRIDX"\n", nbnd, graph->nbnd));
+#endif
 
   return 1;
 }
@@ -194,7 +198,8 @@
 /*************************************************************************/
 idx_t CheckNodeBnd(graph_t *graph, idx_t onbnd) 
 {
-  idx_t i, j, nvtxs, nbnd;
+#ifndef NDEBUG
+  idx_t i, nvtxs, nbnd;
   idx_t *xadj, *adjncy, *where, *bndptr, *bndind;
 
   nvtxs = graph->nvtxs;
@@ -219,6 +224,7 @@
       ASSERTP(bndptr[i] != -1, ("%"PRIDX" %"PRIDX"\n", i, bndptr[i]));
     }
   }
+#endif
 
   return 1;
 }
@@ -231,6 +237,7 @@
 /*************************************************************************/
 idx_t CheckRInfo(ctrl_t *ctrl, ckrinfo_t *rinfo)
 {
+#ifndef NDEBUG
   idx_t i, j;
   cnbr_t *nbrs;
 
@@ -242,6 +249,7 @@
           ("%"PRIDX" %"PRIDX" %"PRIDX" %"PRIDX"\n", 
            i, j, nbrs[i].pid, nbrs[j].pid));
   }
+#endif
 
   return 1;
 }
@@ -254,15 +262,14 @@
 /*************************************************************************/
 idx_t CheckNodePartitionParams(graph_t *graph)
 {
-  idx_t i, j, k, l, nvtxs, me, other;
-  idx_t *xadj, *adjncy, *adjwgt, *vwgt, *where;
+  idx_t i, j, nvtxs, me, other;
+  idx_t *xadj, *adjncy, *vwgt, *where;
   idx_t edegrees[2], pwgts[3];
 
   nvtxs  = graph->nvtxs;
   xadj   = graph->xadj;
   vwgt   = graph->vwgt;
   adjncy = graph->adjncy;
-  adjwgt = graph->adjwgt;
   where  = graph->where;
 
   /*------------------------------------------------------------
@@ -308,6 +315,7 @@
 /*************************************************************************/
 idx_t IsSeparable(graph_t *graph)
 {
+#ifndef NDEBUG
   idx_t i, j, nvtxs, other;
   idx_t *xadj, *adjncy, *where;
 
@@ -327,6 +335,7 @@
            xadj[adjncy[j]+1]-xadj[adjncy[j]]));
     }
   }
+#endif
 
   return 1;
 }
@@ -338,8 +347,8 @@
 /*************************************************************************/
 void CheckKWayVolPartitionParams(ctrl_t *ctrl, graph_t *graph)
 {
-  idx_t i, ii, j, k, kk, l, nvtxs, nbnd, mincut, minvol, me, other, pid;
-  idx_t *xadj, *vsize, *adjncy, *pwgts, *where, *bndind, *bndptr;
+  idx_t i, ii, j, k, kk, nvtxs, me, other, pid;
+  idx_t *xadj, *vsize, *adjncy, *where;
   vkrinfo_t *rinfo, *myrinfo, *orinfo, tmprinfo;
   vnbr_t *mynbrs, *onbrs, *tmpnbrs;
 
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/fm.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/fm.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/fm.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/fm.c	2023-11-03 18:58:08
@@ -28,7 +28,7 @@
 /*************************************************************************/
 void FM_2WayCutRefine(ctrl_t *ctrl, graph_t *graph, real_t *ntpwgts, idx_t niter)
 {
-  idx_t i, ii, j, k, kwgt, nvtxs, nbnd, nswaps, from, to, pass, me, limit, tmp;
+  idx_t i, ii, j, k, kwgt, nvtxs, nbnd, nswaps, from, to, pass, limit, tmp;
   idx_t *xadj, *vwgt, *adjncy, *adjwgt, *where, *id, *ed, *bndptr, *bndind, *pwgts;
   idx_t *moved, *swaps, *perm;
   rpq_t *queues[2];
@@ -207,7 +207,7 @@
 void FM_Mc2WayCutRefine(ctrl_t *ctrl, graph_t *graph, real_t *ntpwgts, idx_t niter)
 {
   idx_t i, ii, j, k, l, kwgt, nvtxs, ncon, nbnd, nswaps, from, to, pass, 
-        me, limit, tmp, cnum;
+        limit, tmp, cnum;
   idx_t *xadj, *adjncy, *vwgt, *adjwgt, *pwgts, *where, *id, *ed, 
         *bndptr, *bndind;
   idx_t *moved, *swaps, *perm, *qnum;
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/graph.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/graph.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/graph.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/graph.c	2023-11-03 18:58:08
@@ -17,8 +17,7 @@
 graph_t *SetupGraph(ctrl_t *ctrl, idx_t nvtxs, idx_t ncon, idx_t *xadj, 
              idx_t *adjncy, idx_t *vwgt, idx_t *vsize, idx_t *adjwgt) 
 {
-  idx_t i, j, k, sum;
-  real_t *nvwgt;
+  idx_t i, j;
   graph_t *graph;
 
   /* allocate the graph and fill in the fields */
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/initpart.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/initpart.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/initpart.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/initpart.c	2023-11-03 18:58:08
@@ -114,18 +114,15 @@
 void RandomBisection(ctrl_t *ctrl, graph_t *graph, real_t *ntpwgts, 
          idx_t niparts)
 {
-  idx_t i, ii, j, k, nvtxs, pwgts[2], zeromaxpwgt, from, me, 
-        bestcut=0, icut, mincut, inbfs;
-  idx_t *xadj, *vwgt, *adjncy, *adjwgt, *where;
+  idx_t i, ii, nvtxs, pwgts[2], zeromaxpwgt, 
+        bestcut=0, inbfs;
+  idx_t *vwgt, *where;
   idx_t *perm, *bestwhere;
 
   WCOREPUSH;
 
   nvtxs  = graph->nvtxs;
-  xadj   = graph->xadj;
   vwgt   = graph->vwgt;
-  adjncy = graph->adjncy;
-  adjwgt = graph->adjwgt;
 
   Allocate2WayPartitionMemory(ctrl, graph);
   where = graph->where;
@@ -191,9 +188,9 @@
 {
   idx_t i, j, k, nvtxs, drain, nleft, first, last, 
         pwgts[2], oneminpwgt, onemaxpwgt, 
-        from, me, bestcut=0, icut, mincut, inbfs;
-  idx_t *xadj, *vwgt, *adjncy, *adjwgt, *where;
-  idx_t *queue, *touched, *gain, *bestwhere;
+        bestcut=0, inbfs;
+  idx_t *xadj, *vwgt, *adjncy, *where;
+  idx_t *queue, *touched, *bestwhere;
 
   WCOREPUSH;
 
@@ -201,7 +198,6 @@
   xadj   = graph->xadj;
   vwgt   = graph->vwgt;
   adjncy = graph->adjncy;
-  adjwgt = graph->adjwgt;
 
   Allocate2WayPartitionMemory(ctrl, graph);
   where = graph->where;
@@ -325,7 +321,7 @@
 void McRandomBisection(ctrl_t *ctrl, graph_t *graph, real_t *ntpwgts, 
          idx_t niparts)
 {
-  idx_t i, ii, j, k, nvtxs, ncon, from, bestcut=0, mincut, inbfs, qnum;
+  idx_t i, ii, nvtxs, ncon, bestcut=0, inbfs, qnum;
   idx_t *bestwhere, *where, *perm, *counts;
   idx_t *vwgt;
 
@@ -385,7 +381,7 @@
 void McGrowBisection(ctrl_t *ctrl, graph_t *graph, real_t *ntpwgts, 
          idx_t niparts)
 {
-  idx_t i, j, k, nvtxs, ncon, from, bestcut=0, mincut, inbfs;
+  idx_t nvtxs, bestcut=0, inbfs;
   idx_t *bestwhere, *where;
 
   WCOREPUSH;
@@ -434,9 +430,9 @@
          idx_t niparts)
 {
   idx_t i, j, k, nvtxs, drain, nleft, first, last, pwgts[2], oneminpwgt, 
-        onemaxpwgt, from, me, bestcut=0, icut, mincut, inbfs;
-  idx_t *xadj, *vwgt, *adjncy, *adjwgt, *where, *bndind;
-  idx_t *queue, *touched, *gain, *bestwhere;
+        onemaxpwgt, bestcut=0, inbfs;
+  idx_t *xadj, *vwgt, *adjncy, *where, *bndind;
+  idx_t *queue, *touched, *bestwhere;
 
   WCOREPUSH;
 
@@ -444,7 +440,6 @@
   xadj   = graph->xadj;
   vwgt   = graph->vwgt;
   adjncy = graph->adjncy;
-  adjwgt = graph->adjwgt;
 
   bestwhere = iwspacemalloc(ctrl, nvtxs);
   queue     = iwspacemalloc(ctrl, nvtxs);
@@ -570,7 +565,7 @@
 void GrowBisectionNode2(ctrl_t *ctrl, graph_t *graph, real_t *ntpwgts, 
          idx_t niparts)
 {
-  idx_t i, j, k, nvtxs, bestcut=0, mincut, inbfs;
+  idx_t i, j, nvtxs, bestcut=0, inbfs;
   idx_t *xadj, *where, *bndind, *bestwhere;
 
   WCOREPUSH;
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/kmetis.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/kmetis.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/kmetis.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/kmetis.c	2023-11-03 18:58:08
@@ -102,10 +102,9 @@
 /*************************************************************************/
 idx_t MlevelKWayPartitioning(ctrl_t *ctrl, graph_t *graph, idx_t *part)
 {
-  idx_t i, j, objval=0, curobj=0, bestobj=0;
+  idx_t i, objval=0, curobj=0, bestobj=0;
   real_t curbal=0.0, bestbal=0.0;
   graph_t *cgraph;
-  int status;
 
 
   for (i=0; i<ctrl->ncuts; i++) {
@@ -171,7 +170,7 @@
 /*************************************************************************/
 void InitKWayPartitioning(ctrl_t *ctrl, graph_t *graph)
 {
-  idx_t i, ntrials, options[METIS_NOPTIONS], curobj=0, bestobj=0;
+  idx_t i, options[METIS_NOPTIONS], curobj=0;
   idx_t *bestwhere=NULL;
   real_t *ubvec=NULL;
   int status;
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/kwayfm.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/kwayfm.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/kwayfm.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/kwayfm.c	2023-11-03 18:58:08
@@ -61,12 +61,12 @@
          real_t ffactor, idx_t omode)
 {
   /* Common variables to all types of kway-refinement/balancing routines */
-  idx_t i, ii, iii, j, k, l, pass, nvtxs, nparts, gain; 
+  idx_t i, ii, iii, j, k, pass, nvtxs, nparts, gain; 
   idx_t from, me, to, oldcut, vwgt;
   idx_t *xadj, *adjncy, *adjwgt;
   idx_t *where, *pwgts, *perm, *bndptr, *bndind, *minwgt, *maxwgt, *itpwgts;
   idx_t nmoved, nupd, *vstatus, *updptr, *updind;
-  idx_t maxndoms, *safetos=NULL, *nads=NULL, *doms=NULL, **adids=NULL, **adwgts=NULL;
+  idx_t maxndoms, *safetos=NULL, *nads=NULL, *doms=NULL, **adids=NULL;
   idx_t *bfslvl=NULL, *bfsind=NULL, *bfsmrk=NULL;
   idx_t bndtype = (omode == OMODE_REFINE ? BNDTYPE_REFINE : BNDTYPE_BALANCE);
 
@@ -118,7 +118,6 @@
 
     nads    = ctrl->nads;
     adids   = ctrl->adids;
-    adwgts  = ctrl->adwgts;
     doms    = iset(nparts, 0, ctrl->pvec1);
   }
 
@@ -371,12 +370,12 @@
          real_t ffactor, idx_t omode)
 {
   /* Common variables to all types of kway-refinement/balancing routines */
-  idx_t i, ii, iii, j, k, l, pass, nvtxs, nparts, gain; 
+  idx_t i, ii, iii, j, k, pass, nvtxs, nparts, gain; 
   idx_t from, me, to, oldcut, vwgt;
   idx_t *xadj, *adjncy;
-  idx_t *where, *pwgts, *perm, *bndptr, *bndind, *minwgt, *maxwgt, *itpwgts;
+  idx_t *where, *pwgts, *perm, *bndind, *minwgt, *maxwgt, *itpwgts;
   idx_t nmoved, nupd, *vstatus, *updptr, *updind;
-  idx_t maxndoms, *safetos=NULL, *nads=NULL, *doms=NULL, **adids=NULL, **adwgts=NULL;
+  idx_t maxndoms, *safetos=NULL, *nads=NULL, *doms=NULL, **adids=NULL;
   idx_t *bfslvl=NULL, *bfsind=NULL, *bfsmrk=NULL;
   idx_t bndtype = (omode == OMODE_REFINE ? BNDTYPE_REFINE : BNDTYPE_BALANCE);
 
@@ -393,7 +392,6 @@
   nvtxs  = graph->nvtxs;
   xadj   = graph->xadj;
   adjncy = graph->adjncy;
-  bndptr = graph->bndptr;
   bndind = graph->bndind;
   where  = graph->where;
   pwgts  = graph->pwgts;
@@ -425,7 +423,6 @@
 
     nads    = ctrl->nads;
     adids   = ctrl->adids;
-    adwgts  = ctrl->adwgts;
     doms    = iset(nparts, 0, ctrl->pvec1);
   }
 
@@ -685,12 +682,12 @@
          real_t ffactor, idx_t omode)
 {
   /* Common variables to all types of kway-refinement/balancing routines */
-  idx_t i, ii, iii, j, k, l, pass, nvtxs, ncon, nparts, gain; 
+  idx_t i, ii, iii, j, k, pass, nvtxs, ncon, nparts, gain; 
   idx_t from, me, to, cto, oldcut;
   idx_t *xadj, *vwgt, *adjncy, *adjwgt;
   idx_t *where, *pwgts, *perm, *bndptr, *bndind, *minwgt, *maxwgt;
   idx_t nmoved, nupd, *vstatus, *updptr, *updind;
-  idx_t maxndoms, *safetos=NULL, *nads=NULL, *doms=NULL, **adids=NULL, **adwgts=NULL;
+  idx_t maxndoms, *safetos=NULL, *nads=NULL, *doms=NULL, **adids=NULL;
   idx_t *bfslvl=NULL, *bfsind=NULL, *bfsmrk=NULL;
   idx_t bndtype = (omode == OMODE_REFINE ? BNDTYPE_REFINE : BNDTYPE_BALANCE);
   real_t *ubfactors, *pijbm;
@@ -765,7 +762,6 @@
 
     nads    = ctrl->nads;
     adids   = ctrl->adids;
-    adwgts  = ctrl->adwgts;
     doms    = iset(nparts, 0, ctrl->pvec1);
   }
 
@@ -1027,12 +1023,12 @@
          real_t ffactor, idx_t omode)
 {
   /* Common variables to all types of kway-refinement/balancing routines */
-  idx_t i, ii, iii, j, k, l, pass, nvtxs, ncon, nparts, gain; 
+  idx_t i, ii, iii, j, k, pass, nvtxs, ncon, nparts, gain; 
   idx_t from, me, to, cto, oldcut;
   idx_t *xadj, *vwgt, *adjncy;
-  idx_t *where, *pwgts, *perm, *bndptr, *bndind, *minwgt, *maxwgt;
+  idx_t *where, *pwgts, *perm, *bndind, *minwgt, *maxwgt;
   idx_t nmoved, nupd, *vstatus, *updptr, *updind;
-  idx_t maxndoms, *safetos=NULL, *nads=NULL, *doms=NULL, **adids=NULL, **adwgts=NULL;
+  idx_t maxndoms, *safetos=NULL, *nads=NULL, *doms=NULL, **adids=NULL;
   idx_t *bfslvl=NULL, *bfsind=NULL, *bfsmrk=NULL;
   idx_t bndtype = (omode == OMODE_REFINE ? BNDTYPE_REFINE : BNDTYPE_BALANCE);
   real_t *ubfactors, *pijbm;
@@ -1053,7 +1049,6 @@
   xadj   = graph->xadj;
   vwgt   = graph->vwgt;
   adjncy = graph->adjncy;
-  bndptr = graph->bndptr;
   bndind = graph->bndind;
   where  = graph->where;
   pwgts  = graph->pwgts;
@@ -1104,7 +1099,6 @@
 
     nads    = ctrl->nads;
     adids   = ctrl->adids;
-    adwgts  = ctrl->adwgts;
     doms    = iset(nparts, 0, ctrl->pvec1);
   }
 
@@ -1462,7 +1456,7 @@
          idx_t *updind, idx_t bndtype, idx_t *vmarker, idx_t *pmarker, 
          idx_t *modind)
 {
-  idx_t i, ii, iii, j, jj, k, kk, l, u, nmod, other, me, myidx; 
+  idx_t i, ii, iii, j, jj, k, kk, u, nmod, other, me, myidx; 
   idx_t *xadj, *vsize, *adjncy, *where;
   vkrinfo_t *myrinfo, *orinfo;
   vnbr_t *mynbrs, *onbrs;
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/kwayrefine.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/kwayrefine.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/kwayrefine.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/kwayrefine.c	2023-11-03 18:58:08
@@ -148,7 +148,7 @@
 /**************************************************************************/
 void ComputeKWayPartitionParams(ctrl_t *ctrl, graph_t *graph)
 {
-  idx_t i, j, k, l, nvtxs, ncon, nparts, nbnd, mincut, me, other;
+  idx_t i, j, k, nvtxs, ncon, nparts, nbnd, mincut, me, other;
   idx_t *xadj, *vwgt, *adjncy, *adjwgt, *pwgts, *where, *bndind, *bndptr;
 
   nparts = ctrl->nparts;
@@ -561,8 +561,8 @@
 /*************************************************************************/
 void ComputeKWayVolGains(ctrl_t *ctrl, graph_t *graph)
 {
-  idx_t i, ii, j, k, l, nvtxs, nparts, me, other, pid; 
-  idx_t *xadj, *vsize, *adjncy, *adjwgt, *where, 
+  idx_t i, ii, j, k, nvtxs, nparts, me, other; 
+  idx_t *xadj, *vsize, *adjncy, *where, 
         *bndind, *bndptr, *ophtable;
   vkrinfo_t *myrinfo, *orinfo;
   vnbr_t *mynbrs, *onbrs;
@@ -575,7 +575,6 @@
   xadj   = graph->xadj;
   vsize  = graph->vsize;
   adjncy = graph->adjncy;
-  adjwgt = graph->adjwgt;
 
   where  = graph->where;
   bndind = graph->bndind;
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/minconn.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/minconn.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/minconn.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/minconn.c	2023-11-03 18:58:08
@@ -18,16 +18,13 @@
 void ComputeSubDomainGraph(ctrl_t *ctrl, graph_t *graph)
 {
   idx_t i, ii, j, pid, other, nparts, nvtxs, nnbrs;
-  idx_t *xadj, *adjncy, *adjwgt, *where;
+  idx_t *where;
   idx_t *pptr, *pind;
   idx_t nads=0, *vadids, *vadwgts;
 
   WCOREPUSH;
 
   nvtxs  = graph->nvtxs;
-  xadj   = graph->xadj;
-  adjncy = graph->adjncy;
-  adjwgt = graph->adjwgt;
   where  = graph->where;
 
   nparts = ctrl->nparts; 
@@ -477,12 +474,11 @@
 void MoveGroupMinConnForCut(ctrl_t *ctrl, graph_t *graph, idx_t to, idx_t nind, 
          idx_t *ind)
 {
-  idx_t i, ii, j, jj, k, l, nvtxs, nbnd, from, me;
+  idx_t i, ii, j, k, nbnd, from, me;
   idx_t *xadj, *adjncy, *adjwgt, *where, *bndptr, *bndind;
   ckrinfo_t *myrinfo;
   cnbr_t *mynbrs;
 
-  nvtxs  = graph->nvtxs;
   xadj   = graph->xadj;
   adjncy = graph->adjncy;
   adjwgt = graph->adjwgt;
@@ -561,12 +557,11 @@
 void MoveGroupMinConnForVol(ctrl_t *ctrl, graph_t *graph, idx_t to, idx_t nind, 
          idx_t *ind, idx_t *vmarker, idx_t *pmarker, idx_t *modind)
 {
-  idx_t i, ii, j, jj, k, l, nvtxs, from, me, other, xgain, ewgt;
+  idx_t i, ii, j, k, l, from, me, other, xgain, ewgt;
   idx_t *xadj, *vsize, *adjncy, *where;
   vkrinfo_t *myrinfo, *orinfo;
   vnbr_t *mynbrs, *onbrs;
 
-  nvtxs  = graph->nvtxs;
   xadj   = graph->xadj;
   vsize  = graph->vsize;
   adjncy = graph->adjncy;
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/ometis.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/ometis.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/ometis.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/ometis.c	2023-11-03 18:58:08
@@ -48,7 +48,6 @@
   graph_t *graph=NULL;
   ctrl_t *ctrl;
   idx_t *cptr, *cind, *piperm;
-  int numflag = 0;
 
   /* set up malloc cleaning code and signal catchers */
   if (!gk_malloc_init()) 
@@ -183,12 +182,10 @@
 void MlevelNestedDissection(ctrl_t *ctrl, graph_t *graph, idx_t *order, 
          idx_t lastvtx)
 {
-  idx_t i, j, nvtxs, nbnd;
+  idx_t i, nbnd;
   idx_t *label, *bndind;
   graph_t *lgraph, *rgraph;
 
-  nvtxs = graph->nvtxs;
-
   MlevelNodeBisectionMultiple(ctrl, graph);
 
   IFSET(ctrl->dbglvl, METIS_DBG_SEPINFO, 
@@ -236,7 +233,7 @@
 void MlevelNestedDissectionCC(ctrl_t *ctrl, graph_t *graph, idx_t *order, 
          idx_t lastvtx)
 {
-  idx_t i, j, nvtxs, nbnd, ncmps, rnvtxs, snvtxs;
+  idx_t i, nvtxs, nbnd, ncmps, rnvtxs, snvtxs;
   idx_t *label, *bndind;
   idx_t *cptr, *cind;
   graph_t **sgraphs;
@@ -423,7 +420,7 @@
          graph_t **r_rgraph)
 {
   idx_t i, ii, j, k, l, istart, iend, mypart, nvtxs, snvtxs[3], snedges[3];
-  idx_t *xadj, *vwgt, *adjncy, *adjwgt, *label, *where, *bndptr, *bndind;
+  idx_t *xadj, *vwgt, *adjncy, *label, *where, *bndptr, *bndind;
   idx_t *sxadj[2], *svwgt[2], *sadjncy[2], *sadjwgt[2], *slabel[2];
   idx_t *rename;
   idx_t *auxadjncy;
@@ -437,7 +434,6 @@
   xadj    = graph->xadj;
   vwgt    = graph->vwgt;
   adjncy  = graph->adjncy;
-  adjwgt  = graph->adjwgt;
   label   = graph->label;
   where   = graph->where;
   bndptr  = graph->bndptr;
@@ -552,8 +548,8 @@
 graph_t **SplitGraphOrderCC(ctrl_t *ctrl, graph_t *graph, idx_t ncmps, 
               idx_t *cptr, idx_t *cind)
 {
-  idx_t i, ii, iii, j, k, l, istart, iend, mypart, nvtxs, snvtxs, snedges;
-  idx_t *xadj, *vwgt, *adjncy, *adjwgt, *label, *where, *bndptr, *bndind;
+  idx_t i, ii, iii, j, k, l, istart, iend, nvtxs, snvtxs, snedges;
+  idx_t *xadj, *vwgt, *adjncy, *label, *where, *bndptr, *bndind;
   idx_t *sxadj, *svwgt, *sadjncy, *sadjwgt, *slabel;
   idx_t *rename;
   idx_t *auxadjncy;
@@ -567,7 +563,6 @@
   xadj    = graph->xadj;
   vwgt    = graph->vwgt;
   adjncy  = graph->adjncy;
-  adjwgt  = graph->adjwgt;
   label   = graph->label;
   where   = graph->where;
   bndptr  = graph->bndptr;
@@ -654,7 +649,7 @@
 /*************************************************************************/
 void MMDOrder(ctrl_t *ctrl, graph_t *graph, idx_t *order, idx_t lastvtx)
 {
-  idx_t i, j, k, nvtxs, nofsub, firstvtx;
+  idx_t i, k, nvtxs, nofsub, firstvtx;
   idx_t *xadj, *adjncy, *label;
   idx_t *perm, *iperm, *head, *qsize, *list, *marker;
 
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/parmetis.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/parmetis.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/parmetis.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/parmetis.c	2023-11-03 18:58:08
@@ -105,7 +105,7 @@
 void MlevelNestedDissectionP(ctrl_t *ctrl, graph_t *graph, idx_t *order, 
          idx_t lastvtx, idx_t npes, idx_t cpos, idx_t *sizes)
 {
-  idx_t i, j, nvtxs, nbnd;
+  idx_t i, nvtxs, nbnd;
   idx_t *label, *bndind;
   graph_t *lgraph, *rgraph;
 
@@ -161,7 +161,6 @@
 int METIS_ComputeVertexSeparator(idx_t *nvtxs, idx_t *xadj, idx_t *adjncy, 
            idx_t *vwgt, idx_t *options, idx_t *r_sepsize, idx_t *part) 
 {
-  idx_t i, j;
   graph_t *graph;
   ctrl_t *ctrl;
 
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/pmetis.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/pmetis.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/pmetis.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/pmetis.c	2023-11-03 18:58:08
@@ -157,7 +157,7 @@
 idx_t MlevelRecursiveBisection(ctrl_t *ctrl, graph_t *graph, idx_t nparts, 
           idx_t *part, real_t *tpwgts, idx_t fpart)
 {
-  idx_t i, j, nvtxs, ncon, objval;
+  idx_t i, nvtxs, ncon, objval;
   idx_t *label, *where;
   graph_t *lgraph, *rgraph;
   real_t wsum, *tpwgts2;
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/separator.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/separator.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/separator.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/separator.c	2023-11-03 18:58:08
@@ -20,7 +20,7 @@
 **************************************************************************/
 void ConstructSeparator(ctrl_t *ctrl, graph_t *graph)
 {
-  idx_t i, j, k, nvtxs, nbnd;
+  idx_t i, j, nvtxs, nbnd;
   idx_t *xadj, *where, *bndind;
 
   WCOREPUSH;
@@ -70,7 +70,10 @@
 {
   idx_t i, ii, j, jj, k, l, nvtxs, nbnd, bnvtxs[3], bnedges[2], csize;
   idx_t *xadj, *adjncy, *bxadj, *badjncy;
-  idx_t *where, *bndind, *bndptr, *vmap, *ivmap, *cover;
+  idx_t *where, *bndind, *vmap, *ivmap, *cover;
+#ifndef NDEBUG
+  idx_t *bndptr;
+#endif
 
   WCOREPUSH;
 
@@ -80,7 +83,9 @@
 
   nbnd   = graph->nbnd;
   bndind = graph->bndind;
+#ifndef NDEBUG
   bndptr = graph->bndptr;
+#endif
   where  = graph->where;
 
   vmap  = iwspacemalloc(ctrl, nvtxs);
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/sfm.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/sfm.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/sfm.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/sfm.c	2023-11-03 18:58:08
@@ -476,7 +476,7 @@
 void FM_2WayNodeBalance(ctrl_t *ctrl, graph_t *graph)
 {
   idx_t i, ii, j, k, jj, kk, nvtxs, nbnd, nswaps, gain;
-  idx_t badmaxpwgt, higain, oldgain, pass, to, other;
+  idx_t badmaxpwgt, higain, oldgain, to, other;
   idx_t *xadj, *vwgt, *adjncy, *where, *pwgts, *edegrees, *bndind, *bndptr;
   idx_t *perm, *moved;
   rpq_t *queue; 
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/srefine.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/srefine.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/srefine.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/srefine.c	2023-11-03 18:58:08
@@ -136,7 +136,7 @@
 /*************************************************************************/
 void Project2WayNodePartition(ctrl_t *ctrl, graph_t *graph)
 {
-  idx_t i, j, nvtxs;
+  idx_t i, nvtxs;
   idx_t *cmap, *where, *cwhere;
   graph_t *cgraph;
 
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/stat.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/stat.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/libmetis/stat.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/libmetis/stat.c	2023-11-03 18:58:08
@@ -20,8 +20,8 @@
 **************************************************************************/
 void ComputePartitionInfoBipartite(graph_t *graph, idx_t nparts, idx_t *where)
 {
-  idx_t i, j, k, nvtxs, ncon, mustfree=0;
-  idx_t *xadj, *adjncy, *vwgt, *vsize, *adjwgt, *kpwgts, *tmpptr;
+  idx_t i, j, nvtxs, ncon, mustfree=0;
+  idx_t *xadj, *adjncy, *vwgt, *vsize, *adjwgt, *kpwgts;
   idx_t *padjncy, *padjwgt, *padjcut;
 
   nvtxs = graph->nvtxs;
@@ -126,7 +126,6 @@
 {
   idx_t i, j, nvtxs, ncon;
   idx_t *kpwgts, *vwgt;
-  real_t balance;
 
   nvtxs = graph->nvtxs;
   ncon = graph->ncon;
diff -ruN src/SuiteSparse/CHOLMOD/Supernodal/cholmod_super_symbolic.c src/SuiteSparse-patched/CHOLMOD/Supernodal/cholmod_super_symbolic.c
--- src/SuiteSparse/CHOLMOD/Supernodal/cholmod_super_symbolic.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Supernodal/cholmod_super_symbolic.c	2023-11-03 18:58:08
@@ -174,11 +174,6 @@
 	merge, snext, esize, maxesize, nrelax0, nrelax1, nrelax2, Asorted ;
     size_t w ;
     int ok = TRUE, find_xsize ;
-    const char* env_use_gpu;
-    const char* env_max_bytes;
-    size_t max_bytes;
-    const char* env_max_fraction;
-    double max_fraction;
 
     /* ---------------------------------------------------------------------- */
     /* check inputs */
@@ -246,15 +241,15 @@
         /* only allocate GPU workspace for supernodal Cholesky, and only when
            the GPU is requested and available. */
 
-        max_bytes = 0;
-        max_fraction = 0;
+        size_t max_bytes = 0;
+        double max_fraction = 0;
 
 #ifdef DLONG
         if ( Common->useGPU == EMPTY )
         {
             /* useGPU not explicity requested by the user, but not explicitly
              * prohibited either.  Query OS environment variables for request.*/
-            env_use_gpu  = getenv("CHOLMOD_USE_GPU");
+            const char *env_use_gpu = getenv("CHOLMOD_USE_GPU");
 
             if ( env_use_gpu )
             {
@@ -266,8 +261,8 @@
                 else
                 {
                     Common->useGPU = 1; /* use the gpu */
-                    env_max_bytes = getenv("CHOLMOD_GPU_MEM_BYTES");
-                    env_max_fraction = getenv("CHOLMOD_GPU_MEM_FRACTION");
+                    const char *env_max_bytes = getenv("CHOLMOD_GPU_MEM_BYTES");
+                    const char *env_max_fraction = getenv("CHOLMOD_GPU_MEM_FRACTION");
                     if ( env_max_bytes )
                     {
                         max_bytes = atol(env_max_bytes);
@@ -554,9 +549,6 @@
 		double xns = (double) ns ;
 		double xtotsize  = (xns * (xns+1) / 2) + xns * (lnz1 - nscol1) ;
 		double z = xtotzeros / xtotsize ;
-
-		Int totsize ;
-		totsize  = (ns * (ns+1) / 2) + ns * (Snz [s+1] - nscol1) ;
 
 		PRINT2 (("oldzeros "ID" newzeros "ID" xtotsize %g z %g\n",
 			    Zeros [s+1], newzeros, xtotsize, z)) ;
diff -ruN src/SuiteSparse/CHOLMOD/Supernodal/t_cholmod_super_numeric.c src/SuiteSparse-patched/CHOLMOD/Supernodal/t_cholmod_super_numeric.c
--- src/SuiteSparse/CHOLMOD/Supernodal/t_cholmod_super_numeric.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Supernodal/t_cholmod_super_numeric.c	2023-11-03 18:58:08
@@ -105,16 +105,27 @@
     cholmod_common *Common
     )
 {
-    double one [2], zero [2], tstart ;
-    double *Lx, *Ax, *Fx, *Az, *Fz, *C ;
+    double one [2], zero [2] ;
+#ifndef NTIMER
+    double tstart ;
+#endif
+    double *Lx, *Ax, *Fx, *C ;
+#ifdef ZOMPLEX
+    double *Az, *Fz ;
+#endif
     Int *Super, *Head, *Ls, *Lpi, *Lpx, *Map, *SuperMap, *RelativeMap, *Next,
-        *Lpos, *Fp, *Fi, *Fnz, *Ap, *Ai, *Anz, *Iwork, *Next_save, *Lpos_save,
-        *Previous;
+        *Lpos, *Fp, *Fi, *Fnz, *Ap, *Ai, *Anz, *Iwork, *Next_save, *Lpos_save;
+#ifdef SUITESPARSE_CUDA
+    Int *Previous;
+#endif
     Int nsuper, n, j, i, k, s, p, pend, k1, k2, nscol, psi, psx, psend, nsrow,
-        pj, d, kd1, kd2, info, ndcol, ndrow, pdi, pdx, pdend, pdi1, pdi2, pdx1,
+        d, kd1, kd2, info, ndcol, ndrow, pdi, pdx, pdend, pdi1, pdi2, pdx1,
         ndrow1, ndrow2, px, dancestor, sparent, dnext, nsrow2, ndrow3, pk, pf,
         pfend, stype, Apacked, Fpacked, q, imap, repeat_supernode, nscol2, ss,
-        tail, nscol_new = 0;
+        nscol_new = 0;
+#ifdef SUITESPARSE_CUDA
+    Int tail;
+#endif
     info = 0 ;
 
     /* ---------------------------------------------------------------------- */
@@ -167,7 +178,9 @@
     Lpos        = Iwork + 2*((size_t) n) + nsuper ;         /* size nsuper*/
     Next_save   = Iwork + 2*((size_t) n) + 2*((size_t) nsuper) ;/* size nsuper*/
     Lpos_save   = Iwork + 2*((size_t) n) + 3*((size_t) nsuper) ;/* size nsuper*/
-    Previous    = Iwork + 2*((size_t) n) + 4*((size_t) nsuper) ;/* size nsuper*/
+#ifdef SUITESPARSE_CUDA
+	Previous    = Iwork + 2*((size_t) n) + 4*((size_t) nsuper) ;/* size nsuper*/
+#endif
 
     Map  = Common->Flag ;   /* size n, use Flag as workspace for Map array */
     Head = Common->Head ;   /* size n+1, only Head [0..nsuper-1] used */
@@ -225,7 +238,9 @@
         Fp = NULL ;
         Fi = NULL ;
         Fx = NULL ;
+#ifdef ZOMPLEX
         Fz = NULL ;
+#endif
         Fnz = NULL ;
         Fpacked = TRUE ;
     }
@@ -234,7 +249,9 @@
         Fp = F->p ;
         Fi = F->i ;
         Fx = F->x ;
-        Fz = F->z ;
+#ifdef ZOMPLEX
+		Fz = F->z ;
+#endif
         Fnz = F->nz ;
         Fpacked = F->packed ;
     }
@@ -242,18 +259,19 @@
     Ap = A->p ;
     Ai = A->i ;
     Ax = A->x ;
+#ifdef ZOMPLEX
     Az = A->z ;
+#endif
     Anz = A->nz ;
     Apacked = A->packed ;
 
     /* clear the Map so that changes in the pattern of A can be detected */
 
-    #ifdef _OPENMP
+#ifdef _OPENMP
     int nthreads = cholmod_nthreads ((double) n, Common) ;
-    #endif
-
 #pragma omp parallel for num_threads(nthreads) \
     if ( n > 128 ) schedule (static)
+#endif
 
     for (i = 0 ; i < n ; i++)
     {
@@ -314,13 +332,12 @@
         {
             /* Case of no GPU, zero individual supernodes */
 
-            #ifdef _OPENMP
+#ifdef _OPENMP
             double work = (double) (pend - psx) * L_ENTRY ;
             int nthreads = cholmod_nthreads (work, Common) ;
-            #endif
-
-#pragma omp parallel for num_threads(nthreads)   \
+#pragma omp parallel for num_threads(nthreads) \
     schedule (static) if ( pend - psx > 1024 )
+#endif
 
             for (p = psx ; p < pend ; p++) {
                 L_CLEAR (Lx,p);
@@ -334,12 +351,11 @@
         /* If row i is the kth row in s, then Map [i] = k.  Similarly, if
          * column j is the kth column in s, then  Map [j] = k. */
 
-        #ifdef _OPENMP
+#ifdef _OPENMP
         int nthreads = cholmod_nthreads ((double) nsrow, Common) ;
-        #endif
-
-#pragma omp parallel for num_threads(nthreads)   \
+#pragma omp parallel for num_threads(nthreads) \
     if ( nsrow > 128 )
+#endif
 
         for (k = 0 ; k < nsrow ; k++)
         {
@@ -367,7 +383,7 @@
 
         pk = psx ;
 
-        #ifdef _OPENMP
+#ifdef _OPENMP
         double work ;
         if (stype != 0)
         {
@@ -382,10 +398,9 @@
             work = (double) (plast - pfirst) ;
         }
         nthreads = cholmod_nthreads (work, Common) ;
-        #endif
-
 #pragma omp parallel for num_threads(nthreads) \
     private ( p, pend, pfend, pf, i, j, imap, q ) if ( k2-k1 > 64 )
+#endif
 
         for (k = k1 ; k < k2 ; k++)
         {
@@ -780,12 +795,11 @@
                 DEBUG (CHOLMOD(dump_real) ("C", C, ndrow2, ndrow1, TRUE,
                                            L_ENTRY, Common)) ;
 
-                #ifdef _OPENMP
+#ifdef _OPENMP
                 int nthreads = cholmod_nthreads ((double) ndrow2, Common) ;
-                #endif
-
-#pragma omp parallel for num_threads(nthreads)   \
+#pragma omp parallel for num_threads(nthreads) \
     if ( ndrow2 > 64 )
+#endif
 
                 for (i = 0 ; i < ndrow2 ; i++)
                 {
@@ -797,13 +811,12 @@
                 /* assemble C into supernode s using the relative map */
                 /* ---------------------------------------------------------- */
 
-                #ifdef _OPENMP
+#ifdef _OPENMP
                 double work = (double) ndcol * (double) ndrow2 * L_ENTRY ;
                 nthreads = cholmod_nthreads (work, Common) ;
-                #endif
-
 #pragma omp parallel for num_threads(nthreads) \
     private ( j, i, px, q ) if (ndrow1 > 64 )
+#endif
 
                 for (j = 0 ; j < ndrow1 ; j++)              /* cols k1:k2-1 */
                 {
diff -ruN src/SuiteSparse/CHOLMOD/Supernodal/t_cholmod_super_solve.c src/SuiteSparse-patched/CHOLMOD/Supernodal/t_cholmod_super_solve.c
--- src/SuiteSparse/CHOLMOD/Supernodal/t_cholmod_super_solve.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Supernodal/t_cholmod_super_solve.c	2023-11-03 18:58:08
@@ -28,7 +28,7 @@
     double minus_one [2], one [2] ;
     Int *Lpi, *Lpx, *Ls, *Super ;
     Int nsuper, k1, k2, psi, psend, psx, nsrow, nscol, ii, s,
-	nsrow2, n, ps2, j, i, d, nrhs ;
+	nsrow2, ps2, j, i, d, nrhs ;
 
     /* ---------------------------------------------------------------------- */
     /* get inputs */
@@ -37,7 +37,6 @@
     nrhs = X->ncol ;
     Ex = E->x ;
     Xx = X->x ;
-    n = L->n ;
     d = X->d ;
 
     nsuper = L->nsuper ;
@@ -244,7 +243,7 @@
     double minus_one [2], one [2] ;
     Int *Lpi, *Lpx, *Ls, *Super ;
     Int nsuper, k1, k2, psi, psend, psx, nsrow, nscol, ii, s,
-	nsrow2, n, ps2, j, i, d, nrhs ;
+	nsrow2, ps2, j, i, d, nrhs ;
 
     /* ---------------------------------------------------------------------- */
     /* get inputs */
@@ -253,7 +252,6 @@
     nrhs = X->ncol ;
     Ex = E->x ;
     Xx = X->x ;
-    n = L->n ;
     d = X->d ;
 
     nsuper = L->nsuper ;
