diff -ruN src/SuiteSparse/CHOLMOD/Include/cholmod.h src/SuiteSparse-patched/CHOLMOD/Include/cholmod.h
--- src/SuiteSparse/CHOLMOD/Include/cholmod.h	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Include/cholmod.h	2023-11-03 21:03:37
@@ -1761,8 +1761,8 @@
     cholmod_common *Common
 ) ;
 
-cholmod_sparse *cholmod_l_add (cholmod_sparse *, cholmod_sparse *, double *,
-    double *, int, int, cholmod_common *) ;
+cholmod_sparse *cholmod_l_add (cholmod_sparse *, cholmod_sparse *, double [2],
+    double [2], int, int, cholmod_common *) ;
 
 /* -------------------------------------------------------------------------- */
 /* cholmod_sparse_xtype: change the xtype of a sparse matrix */
@@ -3205,7 +3205,7 @@
     cholmod_common *Common
 ) ;
 
-int cholmod_l_factorize_p (cholmod_sparse *, double *, int64_t *,
+int cholmod_l_factorize_p (cholmod_sparse *, double [2], int64_t *,
     size_t, cholmod_factor *, cholmod_common *) ;
 
 /* -------------------------------------------------------------------------- */
@@ -3423,7 +3423,7 @@
     cholmod_common *Common
 ) ;
 
-int cholmod_l_rowfac (cholmod_sparse *, cholmod_sparse *, double *, size_t,
+int cholmod_l_rowfac (cholmod_sparse *, cholmod_sparse *, double [2], size_t,
     size_t, cholmod_factor *, cholmod_common *) ;
 
 /* -------------------------------------------------------------------------- */
@@ -3449,7 +3449,7 @@
     cholmod_common *Common
 ) ;
 
-int cholmod_l_rowfac_mask (cholmod_sparse *, cholmod_sparse *, double *, size_t,
+int cholmod_l_rowfac_mask (cholmod_sparse *, cholmod_sparse *, double [2], size_t,
     size_t, int64_t *, int64_t *, cholmod_factor *,
     cholmod_common *) ;
 
@@ -3470,7 +3470,7 @@
     cholmod_common *Common
 ) ;
 
-int cholmod_l_rowfac_mask2 (cholmod_sparse *, cholmod_sparse *, double *,
+int cholmod_l_rowfac_mask2 (cholmod_sparse *, cholmod_sparse *, double [2],
     size_t, size_t, int64_t *, int64_t, int64_t *,
     cholmod_factor *, cholmod_common *) ;
 
@@ -3758,7 +3758,7 @@
     cholmod_common *Common
 ) ;
 
-int cholmod_l_sdmult (cholmod_sparse *, int, double *, double *,
+int cholmod_l_sdmult (cholmod_sparse *, int, double [2], double [2],
     cholmod_dense *, cholmod_dense *Y, cholmod_common *) ;
 
 /* -------------------------------------------------------------------------- */
@@ -4066,7 +4066,7 @@
     cholmod_common *Common
 ) ;
 
-int cholmod_l_rowadd_solve (size_t, cholmod_sparse *, double *,
+int cholmod_l_rowadd_solve (size_t, cholmod_sparse *, double [2],
     cholmod_factor *, cholmod_dense *, cholmod_dense *, cholmod_common *) ;
 
 /* -------------------------------------------------------------------------- */
@@ -4092,7 +4092,7 @@
     cholmod_common *Common
 ) ;
 
-int cholmod_l_rowadd_mark (size_t, cholmod_sparse *, double *,
+int cholmod_l_rowadd_mark (size_t, cholmod_sparse *, double [2],
     int64_t *, cholmod_factor *, cholmod_dense *, cholmod_dense *,
     cholmod_common *) ;
 
@@ -4145,7 +4145,7 @@
     cholmod_common *Common
 ) ;
 
-int cholmod_l_rowdel_solve (size_t, cholmod_sparse *, double *,
+int cholmod_l_rowdel_solve (size_t, cholmod_sparse *, double [2],
     cholmod_factor *, cholmod_dense *, cholmod_dense *, cholmod_common *) ;
 
 /* -------------------------------------------------------------------------- */
@@ -4171,7 +4171,7 @@
     cholmod_common *Common
 ) ;
 
-int cholmod_l_rowdel_mark (size_t, cholmod_sparse *, double *,
+int cholmod_l_rowdel_mark (size_t, cholmod_sparse *, double [2],
     int64_t *, cholmod_factor *, cholmod_dense *, cholmod_dense *,
     cholmod_common *) ;
 
@@ -4545,7 +4545,7 @@
     cholmod_common *Common
 ) ;
 
-int cholmod_l_super_numeric (cholmod_sparse *, cholmod_sparse *, double *,
+int cholmod_l_super_numeric (cholmod_sparse *, cholmod_sparse *, double [2],
     cholmod_factor *, cholmod_common *) ;
 
 /* -------------------------------------------------------------------------- */
diff -ruN src/SuiteSparse/CHOLMOD/Makefile src/SuiteSparse-patched/CHOLMOD/Makefile
--- src/SuiteSparse/CHOLMOD/Makefile	1969-12-31 19:00:00
+++ src/SuiteSparse-patched/CHOLMOD/Makefile	2023-11-03 21:03:37
@@ -0,0 +1,73 @@
+sources = \
+	Check/cholmod_check.c Check/cholmod_l_check.c \
+	Check/cholmod_read.c  Check/cholmod_l_read.c \
+	Check/cholmod_write.c Check/cholmod_l_write.c \
+	Cholesky/cholmod_amd.c          Cholesky/cholmod_l_amd.c \
+	Cholesky/cholmod_analyze.c      Cholesky/cholmod_l_analyze.c \
+	Cholesky/cholmod_colamd.c       Cholesky/cholmod_l_colamd.c \
+	Cholesky/cholmod_etree.c        Cholesky/cholmod_l_etree.c \
+	Cholesky/cholmod_factorize.c    Cholesky/cholmod_l_factorize.c \
+	Cholesky/cholmod_postorder.c    Cholesky/cholmod_l_postorder.c \
+	Cholesky/cholmod_rcond.c        Cholesky/cholmod_l_rcond.c \
+	Cholesky/cholmod_resymbol.c     Cholesky/cholmod_l_resymbol.c \
+	Cholesky/cholmod_rowcolcounts.c Cholesky/cholmod_l_rowcolcounts.c \
+	Cholesky/cholmod_rowfac.c       Cholesky/cholmod_l_rowfac.c \
+	Cholesky/cholmod_solve.c        Cholesky/cholmod_l_solve.c \
+	Cholesky/cholmod_spsolve.c      Cholesky/cholmod_l_spsolve.c \
+	Core/cholmod_aat.c           Core/cholmod_l_aat.c \
+	Core/cholmod_add.c           Core/cholmod_l_add.c \
+	Core/cholmod_band.c          Core/cholmod_l_band.c \
+	Core/cholmod_change_factor.c Core/cholmod_l_change_factor.c \
+	Core/cholmod_common.c        Core/cholmod_l_common.c \
+	Core/cholmod_complex.c       Core/cholmod_l_complex.c \
+	Core/cholmod_copy.c          Core/cholmod_l_copy.c \
+	Core/cholmod_dense.c         Core/cholmod_l_dense.c \
+	Core/cholmod_error.c         Core/cholmod_l_error.c \
+	Core/cholmod_factor.c        Core/cholmod_l_factor.c \
+	Core/cholmod_memory.c        Core/cholmod_l_memory.c \
+	Core/cholmod_sparse.c        Core/cholmod_l_sparse.c \
+	Core/cholmod_transpose.c     Core/cholmod_l_transpose.c \
+	Core/cholmod_triplet.c       Core/cholmod_l_triplet.c \
+	Core/cholmod_version.c       Core/cholmod_l_version.c \
+	MatrixOps/cholmod_drop.c      MatrixOps/cholmod_l_drop.c \
+	MatrixOps/cholmod_horzcat.c   MatrixOps/cholmod_l_horzcat.c \
+	MatrixOps/cholmod_norm.c      MatrixOps/cholmod_l_norm.c \
+	MatrixOps/cholmod_scale.c     MatrixOps/cholmod_l_scale.c \
+	MatrixOps/cholmod_sdmult.c    MatrixOps/cholmod_l_sdmult.c \
+	MatrixOps/cholmod_ssmult.c    MatrixOps/cholmod_l_ssmult.c \
+	MatrixOps/cholmod_submatrix.c MatrixOps/cholmod_l_submatrix.c \
+	MatrixOps/cholmod_symmetry.c  MatrixOps/cholmod_l_symmetry.c \
+	MatrixOps/cholmod_vertcat.c   MatrixOps/cholmod_l_vertcat.c \
+	Modify/cholmod_rowadd.c Modify/cholmod_l_rowadd.c \
+	Modify/cholmod_rowdel.c Modify/cholmod_l_rowdel.c \
+	Modify/cholmod_updown.c Modify/cholmod_l_updown.c \
+	Partition/cholmod_camd.c          Partition/cholmod_l_camd.c \
+	Partition/cholmod_ccolamd.c       Partition/cholmod_l_ccolamd.c \
+	Partition/cholmod_csymamd.c       Partition/cholmod_l_csymamd.c \
+	Partition/cholmod_metis.c         Partition/cholmod_l_metis.c \
+	Partition/cholmod_metis_wrapper.c \
+	Partition/cholmod_nesdis.c        Partition/cholmod_l_nesdis.c \
+	Supernodal/cholmod_super_numeric.c  Supernodal/cholmod_l_super_numeric.c \
+	Supernodal/cholmod_super_solve.c    Supernodal/cholmod_l_super_solve.c \
+	Supernodal/cholmod_super_symbolic.c Supernodal/cholmod_l_super_symbolic.c
+objects = $(sources:.c=.o)
+archive = CHOLMOD.a
+
+PKG_CPPFLAGS = -I./Include -I../SuiteSparse_config \
+	-I../AMD/Include -I../COLAMD/Include \
+	-I../CAMD/Include -I../CCOLAMD/Include \
+	-I. -I./SuiteSparse_metis/include \
+	-I./SuiteSparse_metis/GKlib -I./SuiteSparse_metis/libmetis
+
+all : $(archive)
+
+$(archive) : $(objects)
+	rm -f $@
+	$(AR) -cr $@ $(objects)
+	$(RANLIB) $@
+
+.c.o :
+	$(CC) $(PKG_CPPFLAGS) $(CPPFLAGS) $(CFLAGS) -c $< -o $*.o
+
+clean :
+	@rm -f $(objects) $(archive)
diff -ruN src/SuiteSparse/CHOLMOD/MatrixOps/t_cholmod_sdmult.c src/SuiteSparse-patched/CHOLMOD/MatrixOps/t_cholmod_sdmult.c
--- src/SuiteSparse/CHOLMOD/MatrixOps/t_cholmod_sdmult.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/MatrixOps/t_cholmod_sdmult.c	2023-11-03 21:03:37
@@ -80,8 +80,13 @@
     kcol = X->ncol ;
     dy = Y->d ;
     dx = X->d ;
+    if (A->stype != 0 && kcol >= 4) {
     w = W ;
     Wz = W + 4*nx ;
+    } else {
+    w = NULL ;
+    Wz = NULL ;
+    }
 
     /* ---------------------------------------------------------------------- */
     /* Y = beta * Y */
diff -ruN src/SuiteSparse/CHOLMOD/Partition/cholmod_metis_wrapper.h src/SuiteSparse-patched/CHOLMOD/Partition/cholmod_metis_wrapper.h
--- src/SuiteSparse/CHOLMOD/Partition/cholmod_metis_wrapper.h	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/Partition/cholmod_metis_wrapper.h	2023-11-03 21:03:37
@@ -16,15 +16,6 @@
 #define USE_GKRAND
 #endif
 
-#if defined ( __GNUC__ ) && !defined ( __clang__ )
-    // disable memcpy warnings:
-    #pragma GCC diagnostic ignored "-Wstringop-overflow="
-    // csr.c has misleading indentation:
-    #pragma GCC diagnostic ignored "-Wmisleading-indentation"
-    // GKlib/error.c:
-    #pragma GCC diagnostic ignored "-Wunused-result"
-#endif
-
 #if SUITESPARSE_COMPILER_MSC
     #undef  __thread
     #define __thread __declspec(thread)
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/csr.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/csr.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/csr.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/csr.c	2023-11-03 21:03:37
@@ -16,7 +16,7 @@
     \returns the allocated matrix. The various fields are set to NULL.
 */
 /**************************************************************************/
-gk_csr_t *gk_csr_Create()
+gk_csr_t *gk_csr_Create(void)
 {
   gk_csr_t *mat;
 
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/error.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/error.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/error.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/error.c	2023-11-03 21:03:37
@@ -95,7 +95,7 @@
     of a longjmp
 */
 /***************************************************************************/
-int gk_sigtrap() 
+int gk_sigtrap(void) 
 {
   if (gk_cur_jbufs+1 >= MAX_JBUFS)
     return 0;
@@ -113,7 +113,7 @@
 /*! This function sets the handlers for the signals to their default handlers
  */
 /***************************************************************************/
-int gk_siguntrap() 
+int gk_siguntrap(void) 
 {
   if (gk_cur_jbufs == -1)
     return 0;
@@ -142,7 +142,7 @@
 * This function sets a number of signal handlers and sets the return point 
 * of a longjmp
 ****************************************************************************/
-void gk_SetSignalHandlers() 
+void gk_SetSignalHandlers(void) 
 {
   old_SIGMEM_handler = signal(SIGMEM,  gk_NonLocalExit_Handler);
   old_SIGERR_handler = signal(SIGERR,  gk_NonLocalExit_Handler);
@@ -152,7 +152,7 @@
 /***************************************************************************
 * This function sets the handlers for the signals to their default handlers
 ****************************************************************************/
-void gk_UnsetSignalHandlers() 
+void gk_UnsetSignalHandlers(void) 
 {
   signal(SIGMEM,  old_SIGMEM_handler);
   signal(SIGERR,  old_SIGERR_handler);
@@ -198,7 +198,7 @@
 /*************************************************************************
 * This function prints a backtrace of calling functions
 **************************************************************************/
-void PrintBackTrace()
+void PrintBackTrace(void)
 {
 #ifdef HAVE_EXECINFO_H
   void *array[10];
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/gk_getopt.h src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/gk_getopt.h
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/gk_getopt.h	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/gk_getopt.h	2023-11-03 21:05:52
@@ -52,11 +52,9 @@
 
 
 /* Function prototypes */
-extern int gk_getopt(int __argc, char **__argv, char *__shortopts);
-extern int gk_getopt_long(int __argc, char **__argv, char *__shortopts,
-              struct gk_option *__longopts, int *__longind);
-extern int gk_getopt_long_only (int __argc, char **__argv,
-              char *__shortopts, struct gk_option *__longopts, int *__longind);
+int gk_getopt(int, char **, char *);
+int gk_getopt_long(int, char **, char *, struct gk_option *, int *);
+int gk_getopt_long_only (int, char **, char *, struct gk_option *, int *);
 
 
 
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/gk_mkrandom.h src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/gk_mkrandom.h
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/gk_mkrandom.h	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/gk_mkrandom.h	2023-11-03 21:03:37
@@ -33,7 +33,7 @@
 /*************************************************************************/\
 /*! Returns a random number */ \
 /**************************************************************************/\
-RNGT FPRFX ## rand() \
+RNGT FPRFX ## rand(void) \
 {\
   if (sizeof(RNGT) <= sizeof(int32_t)) \
     return (RNGT)gk_randint32(); \
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/gkregex.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/gkregex.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/gkregex.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/gkregex.c	2023-11-03 21:03:37
@@ -19,7 +19,7 @@
    02111-1307 USA.  */
 
 /* this is for removing a compiler warning */
-void gkfooo() { return; }
+void gkfooo(void) { return; }
 
 #ifdef USE_GKREGEX
 
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/graph.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/graph.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/graph.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/graph.c	2023-11-03 21:03:37
@@ -16,7 +16,7 @@
     \returns the allocated graph. The various fields are set to NULL.
 */
 /**************************************************************************/
-gk_graph_t *gk_graph_Create()
+gk_graph_t *gk_graph_Create(void)
 {
   gk_graph_t *graph;
 
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/mcore.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/mcore.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/mcore.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/mcore.c	2023-11-03 21:03:37
@@ -40,7 +40,7 @@
 /*! This function creates an mcore. This version is used for gkmcore.
  */
 /*************************************************************************/
-gk_mcore_t *gk_gkmcoreCreate()
+gk_mcore_t *gk_gkmcoreCreate(void)
 {
   gk_mcore_t *mcore;
 
diff -ruN src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/memory.c src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/memory.c
--- src/SuiteSparse/CHOLMOD/SuiteSparse_metis/GKlib/memory.c	2023-10-16 14:57:34
+++ src/SuiteSparse-patched/CHOLMOD/SuiteSparse_metis/GKlib/memory.c	2023-11-03 21:03:37
@@ -96,7 +96,7 @@
 /*! This function initializes tracking of heap allocations. 
 */
 /*************************************************************************/
-int gk_malloc_init()
+int gk_malloc_init(void)
 {
 #if 1
   // Revised for SuiteSparse: do not create gkmcore:
@@ -235,7 +235,7 @@
 * This function returns the current ammount of dynamically allocated
 * memory that is used by the system
 **************************************************************************/
-size_t gk_GetCurMemoryUsed()
+size_t gk_GetCurMemoryUsed(void)
 {
   if (gkmcore == NULL)
     return 0;
@@ -248,7 +248,7 @@
 * This function returns the maximum ammount of dynamically allocated 
 * memory that was used by the system
 **************************************************************************/
-size_t gk_GetMaxMemoryUsed()
+size_t gk_GetMaxMemoryUsed(void)
 {
   if (gkmcore == NULL)
     return 0;
