--- src/SuiteSparse/CHOLMOD/Include/cholmod.h	2023-11-03 19:07:14
+++ inst/include/Matrix/cholmod.h	2023-11-03 19:33:59
@@ -94,111 +94,31 @@
  *	parameter.  It is always an input/output parameter.
  */
 
-#ifndef CHOLMOD_H
-#define CHOLMOD_H
+#ifndef R_MATRIX_CHOLMOD_H
+#define R_MATRIX_CHOLMOD_H
 
 #define CHOLMOD_DATE "Oct 15, 2023"
 #define CHOLMOD_MAIN_VERSION   4
 #define CHOLMOD_SUB_VERSION    2
 #define CHOLMOD_SUBSUB_VERSION 2
 
-/* ========================================================================== */
-/* === Include/cholmod_io64 ================================================= */
-/* ========================================================================== */
 
-/* assume large file support.  If problems occur, compile with -DNLARGEFILE */
-
-/* Definitions required for large file I/O, which must come before any other
- * #includes.  These are not used if -DNLARGEFILE is defined at compile time.
- * Large file support may not be portable across all platforms and compilers;
- * if you encounter an error here, compile your code with -DNLARGEFILE.  In
- * particular, you must use -DNLARGEFILE for MATLAB 6.5 or earlier (which does
- * not have the io64.h include file).
- */
-
-/* skip all of this if NLARGEFILE is defined at the compiler command line */
-#ifndef NLARGEFILE
-
-#if defined(MATLAB_MEX_FILE) || defined(MATHWORKS)
-
-/* CHOLMOD is being compiled as a MATLAB mexFunction, or for use in MATLAB */
-#include "io64.h"
-
-#else
-
-/* CHOLMOD is being compiled in a stand-alone library */
-#undef  _LARGEFILE64_SOURCE
-#define _LARGEFILE64_SOURCE
-#undef  _FILE_OFFSET_BITS
-#define _FILE_OFFSET_BITS 64
-
-#endif
-
-#endif
-
 /* ========================================================================== */
 /* === SuiteSparse_config.h ================================================= */
 /* ========================================================================== */
 
+#ifndef R_MATRIX_CHOLMOD_H
 #include "SuiteSparse_config.h"
+#else
+#include <stdint.h>
+#include <stddef.h>
+#endif /* !defined(R_MATRIX_CHOLMOD_H) */
 
-/* ========================================================================== */
-/* === Include/cholmod_config.h ============================================= */
-/* ========================================================================== */
 
-/* CHOLMOD configuration file, for inclusion in user programs.
- *
- * You do not have to edit any CHOLMOD files to compile and install CHOLMOD.
- * However, if you do not use all of CHOLMOD's modules, you need to compile
- * with the appropriate flag, or edit this file to add the appropriate #define.
- *
- * Compiler flags for CHOLMOD:
- *
- * -DNCHECK	    do not include the Check module.
- * -DNCHOLESKY	    do not include the Cholesky module.
- * -DNPARTITION	    do not include the Partition module.
- * -DNCAMD          do not include the interfaces to CAMD,
- *                  CCOLAMD, CSYMAND in Partition module.
- * -DNMATRIXOPS	    do not include the MatrixOps module.
- * -DNMODIFY	    do not include the Modify module.
- * -DNSUPERNODAL    do not include the Supernodal module.
- *
- * -DNPRINT	    do not print anything
- *
- * The Core Module is always included in the CHOLMOD library.
- */
-
-/* Use the compiler flag, or uncomment the definition(s), if you want to use
- * one or more non-default installation options: */
-
-/*
-#define NCHECK
-#define NCHOLESKY
-#define NCAMD
-#define NPARTITION
-#define NMATRIXOPS
-#define NMODIFY
-#define NSUPERNODAL
-#define NPRINT
-#define NGPL
-*/
-
-/* The NGPL option disables the MatrixOps, Modify, and Supernodal modules.  The
-    existence of this #define here, and its use in these 3 modules, does not
-    affect the license itself; see CHOLMOD/Doc/License.txt for your actual
-    license.
- */
-
-#ifdef NGPL
-#undef  NMATRIXOPS
-#define NMATRIXOPS
-#undef  NMODIFY
-#define NMODIFY
-#undef  NSUPERNODAL
-#define NSUPERNODAL
+#ifdef __cplusplus
+extern "C" {
 #endif
 
-
 /* ========================================================================== */
 /* === Include/cholmod_core.h =============================================== */
 /* ========================================================================== */
@@ -442,21 +362,6 @@
 
 
 /* ========================================================================== */
-/* === CUDA BLAS for the GPU ================================================ */
-/* ========================================================================== */
-
-/* Define buffering parameters for GPU processing */
-#ifndef SUITESPARSE_GPU_EXTERN_ON
-#ifdef SUITESPARSE_CUDA
-#include <cublas_v2.h>
-#endif
-#endif
-
-#define CHOLMOD_DEVICE_SUPERNODE_BUFFERS 6
-#define CHOLMOD_HOST_SUPERNODE_BUFFERS 8
-#define CHOLMOD_DEVICE_STREAMS 2
-
-/* ========================================================================== */
 /* === CHOLMOD objects ====================================================== */
 /* ========================================================================== */
 
@@ -578,11 +483,6 @@
 #define CHOLMOD_SIMPLICIAL 0	/* always do simplicial */
 #define CHOLMOD_AUTO 1		/* select simpl/super depending on matrix */
 #define CHOLMOD_SUPERNODAL 2	/* always do supernodal */
-
-/* make it easy for C++ programs to include CHOLMOD */
-#ifdef __cplusplus
-extern "C" {
-#endif
 
 typedef struct cholmod_common_struct
 {
@@ -1141,7 +1041,7 @@
        the CHOLMOD Common, regardless of whether or not they are compiled
        with the GPU libraries or not */
 
-#ifdef SUITESPARSE_CUDA
+#if defined(SUITESPARSE_CUDA) && !defined(R_MATRIX_CHOLMOD_H)
     /* in CUDA, these three types are pointers */
     #define CHOLMOD_CUBLAS_HANDLE cublasHandle_t
     #define CHOLMOD_CUDASTREAM    cudaStream_t
@@ -1230,6 +1130,8 @@
 #define CHOLMOD_ANALYZE_FOR_CHOLESKY 1
 #define CHOLMOD_ANALYZE_FOR_SPQRGPU  2
 
+#ifndef R_MATRIX_CHOLMOD_H
+
 /* -------------------------------------------------------------------------- */
 /* cholmod_start:  first call to CHOLMOD */
 /* -------------------------------------------------------------------------- */
@@ -1384,7 +1286,9 @@
 
 int cholmod_l_divcomplex (double, double, double, double, double *, double *) ;
 
+#endif /* !defined(R_MATRIX_CHOLMOD_H) */
 
+
 /* ========================================================================== */
 /* === Core/cholmod_sparse ================================================== */
 /* ========================================================================== */
@@ -1441,6 +1345,8 @@
 			 * (nz is required) */
 
 } cholmod_sparse ;
+
+#ifndef R_MATRIX_CHOLMOD_H
 
 typedef struct cholmod_descendant_score_t
 {
@@ -1779,6 +1685,8 @@
 ) ;
 
 int cholmod_l_sparse_xtype (int, cholmod_sparse *, cholmod_common *) ;
+
+#endif /* !defined(R_MATRIX_CHOLMOD_H) */
 
 
 /* ========================================================================== */
@@ -1915,6 +1823,7 @@
 
 } cholmod_factor ;
 
+#ifndef R_MATRIX_CHOLMOD_H
 
 /* -------------------------------------------------------------------------- */
 /* cholmod_allocate_factor: allocate a factor (symbolic LL' or LDL') */
@@ -2064,7 +1973,9 @@
 
 int cholmod_l_factor_xtype (int, cholmod_factor *, cholmod_common *) ;
 
+#endif /* !defined(R_MATRIX_CHOLMOD_H) */
 
+
 /* ========================================================================== */
 /* === Core/cholmod_dense =================================================== */
 /* ========================================================================== */
@@ -2086,6 +1997,8 @@
 
 } cholmod_dense ;
 
+#ifndef R_MATRIX_CHOLMOD_H
+
 /* -------------------------------------------------------------------------- */
 /* cholmod_allocate_dense:  allocate a dense matrix (contents uninitialized) */
 /* -------------------------------------------------------------------------- */
@@ -2263,7 +2176,9 @@
 
 int cholmod_l_dense_xtype (int, cholmod_dense *, cholmod_common *) ;
 
+#endif /* !defined(R_MATRIX_CHOLMOD_H) */
 
+
 /* ========================================================================== */
 /* === Core/cholmod_triplet ================================================= */
 /* ========================================================================== */
@@ -2333,6 +2248,8 @@
 
 } cholmod_triplet ;
 
+#ifndef R_MATRIX_CHOLMOD_H
+
 /* -------------------------------------------------------------------------- */
 /* cholmod_allocate_triplet:  allocate a triplet matrix */
 /* -------------------------------------------------------------------------- */
@@ -2443,7 +2360,9 @@
 
 int cholmod_l_triplet_xtype (int, cholmod_triplet *, cholmod_common *) ;
 
+#endif /* !defined(R_MATRIX_CHOLMOD_H) */
 
+
 /* ========================================================================== */
 /* === Core/cholmod_memory ================================================== */
 /* ========================================================================== */
@@ -2464,6 +2383,8 @@
  * corrupted.
  */
 
+#ifndef R_MATRIX_CHOLMOD_H
+
 void *cholmod_malloc	/* returns pointer to the newly malloc'd block */
 (
     /* ---- input ---- */
@@ -2533,10 +2454,15 @@
 int cholmod_l_realloc_multiple (size_t, int, int, void **, void **, void **,
     void **, size_t *, cholmod_common *) ;
 
+#endif /* !defined(R_MATRIX_CHOLMOD_H) */
+
+
 /* ========================================================================== */
 /* === version control ====================================================== */
 /* ========================================================================== */
 
+#ifndef R_MATRIX_CHOLMOD_H
+
 int cholmod_version     /* returns CHOLMOD_VERSION */
 (
     /* output, contents not defined on input.  Not used if NULL.
@@ -2558,6 +2484,9 @@
    #endif
 */
 
+#endif /* !defined(R_MATRIX_CHOLMOD_H) */
+
+
 /* ========================================================================== */
 /* === symmetry types ======================================================= */
 /* ========================================================================== */
@@ -2569,69 +2498,6 @@
 #define CHOLMOD_MM_SKEW_SYMMETRIC 5
 #define CHOLMOD_MM_SYMMETRIC_POSDIAG 6
 #define CHOLMOD_MM_HERMITIAN_POSDIAG 7
-
-/* ========================================================================== */
-/* === Numerical relop macros =============================================== */
-/* ========================================================================== */
-
-/* These macros correctly handle the NaN case.
- *
- *  CHOLMOD_IS_NAN(x):
- *	True if x is NaN.  False otherwise.  The commonly-existing isnan(x)
- *	function could be used, but it's not in Kernighan & Ritchie 2nd edition
- *	(ANSI C89).  It may appear in <math.h>, but I'm not certain about
- *	portability.  The expression x != x is true if and only if x is NaN,
- *	according to the IEEE 754 floating-point standard.
- *
- *  CHOLMOD_IS_ZERO(x):
- *	True if x is zero.  False if x is nonzero, NaN, or +/- Inf.
- *	This is (x == 0) if the compiler is IEEE 754 compliant.
- *
- *  CHOLMOD_IS_NONZERO(x):
- *	True if x is nonzero, NaN, or +/- Inf.  False if x zero.
- *	This is (x != 0) if the compiler is IEEE 754 compliant.
- *
- *  CHOLMOD_IS_LT_ZERO(x):
- *	True if x is < zero or -Inf.  False if x is >= 0, NaN, or +Inf.
- *	This is (x < 0) if the compiler is IEEE 754 compliant.
- *
- *  CHOLMOD_IS_GT_ZERO(x):
- *	True if x is > zero or +Inf.  False if x is <= 0, NaN, or -Inf.
- *	This is (x > 0) if the compiler is IEEE 754 compliant.
- *
- *  CHOLMOD_IS_LE_ZERO(x):
- *	True if x is <= zero or -Inf.  False if x is > 0, NaN, or +Inf.
- *	This is (x <= 0) if the compiler is IEEE 754 compliant.
- */
-
-#ifdef CHOLMOD_WINDOWS
-
-/* Yes, this is exceedingly ugly.  Blame Microsoft, which hopelessly */
-/* violates the IEEE 754 floating-point standard in a bizarre way. */
-/* If you're using an IEEE 754-compliant compiler, then x != x is true */
-/* iff x is NaN.  For Microsoft, (x < x) is true iff x is NaN. */
-/* So either way, this macro safely detects a NaN. */
-#define CHOLMOD_IS_NAN(x)	(((x) != (x)) || (((x) < (x))))
-#define CHOLMOD_IS_ZERO(x)	(((x) == 0.) && !CHOLMOD_IS_NAN(x))
-#define CHOLMOD_IS_NONZERO(x)	(((x) != 0.) || CHOLMOD_IS_NAN(x))
-#define CHOLMOD_IS_LT_ZERO(x)	(((x) < 0.) && !CHOLMOD_IS_NAN(x))
-#define CHOLMOD_IS_GT_ZERO(x)	(((x) > 0.) && !CHOLMOD_IS_NAN(x))
-#define CHOLMOD_IS_LE_ZERO(x)	(((x) <= 0.) && !CHOLMOD_IS_NAN(x))
-
-#else
-
-/* These all work properly, according to the IEEE 754 standard ... except on */
-/* a PC with windows.  Works fine in Linux on the same PC... */
-#define CHOLMOD_IS_NAN(x)	((x) != (x))
-#define CHOLMOD_IS_ZERO(x)	((x) == 0.)
-#define CHOLMOD_IS_NONZERO(x)	((x) != 0.)
-#define CHOLMOD_IS_LT_ZERO(x)	((x) < 0.)
-#define CHOLMOD_IS_GT_ZERO(x)	((x) > 0.)
-#define CHOLMOD_IS_LE_ZERO(x)	((x) <= 0.)
-
-#endif
-
-
 
 
 /* ========================================================================== */
@@ -2691,7 +2557,7 @@
  * cholmod_read_* routines.
  */
 
-#ifndef NCHECK
+#ifndef R_MATRIX_CHOLMOD_H
 
 /* -------------------------------------------------------------------------- */
 /* cholmod_check_common:  check the Common object */
@@ -3048,13 +2914,10 @@
 
 int cholmod_l_write_dense (FILE *, cholmod_dense *, const char *,
     cholmod_common *) ;
-#endif
+
+#endif /* !defined(R_MATRIX_CHOLMOD_H) */
 
 
-
-
-
-
 /* ========================================================================== */
 /* === Include/cholmod_cholesky.h =========================================== */
 /* ========================================================================== */
@@ -3102,7 +2965,7 @@
  * Required by the Partition module.
  */
 
-#ifndef NCHOLESKY
+#ifndef R_MATRIX_CHOLMOD_H
 
 /* -------------------------------------------------------------------------- */
 /* cholmod_analyze:  order and analyze (simplicial or supernodal) */
@@ -3208,6 +3071,8 @@
 int cholmod_l_factorize_p (cholmod_sparse *, double [2], int64_t *,
     size_t, cholmod_factor *, cholmod_common *) ;
 
+#endif /* !defined(R_MATRIX_CHOLMOD_H) */
+
 /* -------------------------------------------------------------------------- */
 /* cholmod_solve:  solve a linear system (simplicial or supernodal) */
 /* -------------------------------------------------------------------------- */
@@ -3226,6 +3091,8 @@
 #define CHOLMOD_P    7		/* permute x=Px */
 #define CHOLMOD_Pt   8		/* permute x=P'x */
 
+#ifndef R_MATRIX_CHOLMOD_H
+
 cholmod_dense *cholmod_solve	/* returns the solution X */
 (
     /* ---- input ---- */
@@ -3622,7 +3489,7 @@
 int64_t cholmod_l_postorder (int64_t *, size_t,
     int64_t *, int64_t *, cholmod_common *) ;
 
-#endif
+#endif /* !defined(R_MATRIX_CHOLMOD_H) */
 
 
 /* ========================================================================== */
@@ -3650,7 +3517,7 @@
  * Requires the Core module.  Not required by any other CHOLMOD module.
  */
 
-#ifndef NMATRIXOPS
+#ifndef R_MATRIX_CHOLMOD_H
 
 /* -------------------------------------------------------------------------- */
 /* cholmod_drop:  drop entries with small absolute value */
@@ -3715,6 +3582,8 @@
 cholmod_sparse *cholmod_l_horzcat (cholmod_sparse *, cholmod_sparse *, int,
     cholmod_common *) ;
 
+#endif /* !defined(R_MATRIX_CHOLMOD_H) */
+
 /* -------------------------------------------------------------------------- */
 /* cholmod_scale:  A = diag(s)*A, A*diag(s), s*A or diag(s)*A*diag(s) */
 /* -------------------------------------------------------------------------- */
@@ -3725,6 +3594,8 @@
 #define CHOLMOD_COL 2		/* A = A*diag(s) */
 #define CHOLMOD_SYM 3		/* A = diag(s)*A*diag(s) */
 
+#ifndef R_MATRIX_CHOLMOD_H
+
 int cholmod_scale
 (
     /* ---- input ---- */
@@ -3849,11 +3720,9 @@
     int64_t *, int64_t *, int64_t *,
     cholmod_common *) ;
 
-#endif
+#endif /* !defined(R_MATRIX_CHOLMOD_H) */
 
 
-
-
 /* ========================================================================== */
 /* === Include/cholmod_modify.h ============================================= */
 /* ========================================================================== */
@@ -3895,9 +3764,8 @@
  * Requires the Core module.  Not required by any other CHOLMOD module.
  */
 
+#ifndef R_MATRIX_CHOLMOD_H
 
-#ifndef NMODIFY
-
 /* -------------------------------------------------------------------------- */
 /* cholmod_updown:  multiple rank update/downdate */
 /* -------------------------------------------------------------------------- */
@@ -4175,10 +4043,9 @@
     int64_t *, cholmod_factor *, cholmod_dense *, cholmod_dense *,
     cholmod_common *) ;
 
-#endif
+#endif /* !defined(R_MATRIX_CHOLMOD_H) */
 
 
-
 /* ========================================================================== */
 /* === Include/cholmod_camd.h =============================================== */
 /* ========================================================================== */
@@ -4199,7 +4066,7 @@
  * and CCOLAMD.  Used by functions in the Partition Module.
  */
 
-#ifndef NCAMD
+#ifndef R_MATRIX_CHOLMOD_H
 
 /* -------------------------------------------------------------------------- */
 /* cholmod_ccolamd */
@@ -4269,8 +4136,9 @@
 int cholmod_l_camd (cholmod_sparse *, int64_t *, size_t,
     int64_t *, int64_t *, cholmod_common *) ;
 
-#endif
+#endif /* !defined(R_MATRIX_CHOLMOD_H) */
 
+
 /* ========================================================================== */
 /* === Include/cholmod_partition.h ========================================== */
 /* ========================================================================== */
@@ -4307,6 +4175,8 @@
 // These routines still exist if CHOLMOD is compiled with -DNPARTITION,
 // but they return Common->status = CHOLMOD_NOT_INSTALLED.
 
+#ifndef R_MATRIX_CHOLMOD_H
+
 /* -------------------------------------------------------------------------- */
 /* cholmod_nested_dissection */
 /* -------------------------------------------------------------------------- */
@@ -4435,6 +4305,9 @@
 int64_t cholmod_l_collapse_septree (size_t, size_t, double, size_t,
     int64_t *, int64_t *, cholmod_common *) ;
 
+#endif /* !defined(R_MATRIX_CHOLMOD_H) */
+
+
 /* ========================================================================== */
 /* === Include/cholmod_supernodal.h ========================================= */
 /* ========================================================================== */
@@ -4472,7 +4345,7 @@
  * Optionally used by the Cholesky module.
  */
 
-#ifndef NSUPERNODAL
+#ifndef R_MATRIX_CHOLMOD_H
 
 /* -------------------------------------------------------------------------- */
 /* cholmod_super_symbolic */
@@ -4594,98 +4467,120 @@
 int cholmod_l_super_ltsolve (cholmod_factor *, cholmod_dense *, cholmod_dense *,
     cholmod_common *) ;
 
-#endif
+#endif /* !defined(R_MATRIX_CHOLMOD_H) */
 
 #ifdef __cplusplus
 }
 #endif
 
 
-/* ========================================================================== */
-/* === Include/cholmod_gpu.h ================================================ */
-/* ========================================================================== */
+/* <<<< Matrix <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
 
-/* -----------------------------------------------------------------------------
- * CHOLMOD/Include/cholmod_gpu.h.
- * Copyright (C) 2014, Timothy A. Davis
- * http://www.suitesparse.com
- * -------------------------------------------------------------------------- */
-
-/* CHOLMOD GPU module
- */
-
-#ifdef SUITESPARSE_CUDA
-
-#include "omp.h"
-#include <fenv.h>
-#ifndef SUITESPARSE_GPU_EXTERN_ON
-#include <cuda.h>
-#include <cuda_runtime.h>
-#endif
+/* We declare a minimal subset of the above as "API" : */
 
-/* CHOLMOD_GPU_PRINTF: for printing GPU debug error messages */
-/*
-#define CHOLMOD_GPU_PRINTF(args) printf args
-*/
-#define CHOLMOD_GPU_PRINTF(args)
-
-/* define supernode requirements for processing on GPU */
-#define CHOLMOD_ND_ROW_LIMIT 256 /* required descendant rows */
-#define CHOLMOD_ND_COL_LIMIT 32  /* required descendnat cols */
-#define CHOLMOD_POTRF_LIMIT  512  /* required cols for POTRF & TRSM on GPU */
-
-/* # of host supernodes to perform before checking for free pinned buffers */
-#define CHOLMOD_GPU_SKIP     3    
-
-#define CHOLMOD_HANDLE_CUDA_ERROR(e,s) {if (e) {ERROR(CHOLMOD_GPU_PROBLEM,s);}}
-
-/* make it easy for C++ programs to include CHOLMOD */
 #ifdef __cplusplus
 extern "C" {
 #endif
 
-typedef struct cholmod_gpu_pointers
-{
-    double *h_Lx [CHOLMOD_HOST_SUPERNODE_BUFFERS] ;
-    double *d_Lx [CHOLMOD_DEVICE_STREAMS] ;
-    double *d_C ;
-    double *d_A [CHOLMOD_DEVICE_STREAMS] ;
-    void   *d_Ls ;
-    void   *d_Map ;
-    void   *d_RelativeMap ;
+typedef cholmod_common  * CHM_CM;
+typedef cholmod_factor  * CHM_FR;
+typedef cholmod_sparse  * CHM_SP;
+typedef cholmod_triplet * CHM_TR;
+typedef cholmod_dense   * CHM_DN;
 
-} cholmod_gpu_pointers ;
+#define R_MATRIX_CHOLMOD(_NAME_) M_cholmod_ ## _NAME_
 
-int cholmod_gpu_memorysize   /* GPU memory size available, 1 if no GPU */
-(
-    size_t         *total_mem,
-    size_t         *available_mem,
-    cholmod_common *Common
-) ;
+#ifndef R_MATRIX_INLINE
+# define R_MATRIX_INLINE
+#endif
 
-int cholmod_l_gpu_memorysize /* GPU memory size available, 1 if no GPU */
-(
-    size_t         *total_mem,
-    size_t         *available_mem,
-    cholmod_common *Common
-) ;
- 
-int cholmod_gpu_probe   ( cholmod_common *Common ) ;
-int cholmod_l_gpu_probe ( cholmod_common *Common ) ;
+R_MATRIX_INLINE CHM_SP R_MATRIX_CHOLMOD(aat)(
+	CHM_SP, int *, size_t, int, CHM_CM);
+R_MATRIX_INLINE CHM_SP R_MATRIX_CHOLMOD(add)(
+	CHM_SP, CHM_SP, double[2], double[2], int, int, CHM_CM);
+R_MATRIX_INLINE CHM_DN R_MATRIX_CHOLMOD(allocate_dense)(
+	size_t, size_t, size_t, int, CHM_CM);
+R_MATRIX_INLINE CHM_SP R_MATRIX_CHOLMOD(allocate_sparse)(
+	size_t, size_t, size_t, int, int, int, int, CHM_CM);
+R_MATRIX_INLINE CHM_TR R_MATRIX_CHOLMOD(allocate_triplet)(
+	size_t, size_t, size_t, int, int, CHM_CM);
+R_MATRIX_INLINE CHM_FR R_MATRIX_CHOLMOD(analyze)(
+	CHM_SP, CHM_CM);
+R_MATRIX_INLINE CHM_FR R_MATRIX_CHOLMOD(analyze_p)(
+	CHM_SP, int *, int *, size_t, CHM_CM);
+R_MATRIX_INLINE    int R_MATRIX_CHOLMOD(band_inplace)(
+	int, int, int, CHM_SP, CHM_CM);
+R_MATRIX_INLINE    int R_MATRIX_CHOLMOD(change_factor)(
+	int, int, int, int, int, CHM_FR, CHM_CM);
+R_MATRIX_INLINE CHM_SP R_MATRIX_CHOLMOD(copy)(
+	CHM_SP, int, int, CHM_CM);
+R_MATRIX_INLINE CHM_DN R_MATRIX_CHOLMOD(copy_dense)(
+	CHM_DN, CHM_CM);
+R_MATRIX_INLINE CHM_FR R_MATRIX_CHOLMOD(copy_factor)(
+	CHM_FR, CHM_CM);
+R_MATRIX_INLINE CHM_SP R_MATRIX_CHOLMOD(copy_sparse)(
+	CHM_SP, CHM_CM);
+R_MATRIX_INLINE    int R_MATRIX_CHOLMOD(defaults)(
+	CHM_CM);
+R_MATRIX_INLINE CHM_SP R_MATRIX_CHOLMOD(dense_to_sparse)(
+	CHM_DN, int, CHM_CM);
+R_MATRIX_INLINE   void R_MATRIX_CHOLMOD(error_handler)(
+	int, const char *, int, const char *);
+R_MATRIX_INLINE CHM_SP R_MATRIX_CHOLMOD(factor_to_sparse )(
+	CHM_FR, CHM_CM);
+R_MATRIX_INLINE    int R_MATRIX_CHOLMOD(factorize)(
+	CHM_SP, CHM_FR, CHM_CM);
+R_MATRIX_INLINE    int R_MATRIX_CHOLMOD(factorize_p)(
+	CHM_SP, double[2], int *, size_t, CHM_FR, CHM_CM);
+R_MATRIX_INLINE    int R_MATRIX_CHOLMOD(finish)(
+	CHM_CM);
+R_MATRIX_INLINE    int R_MATRIX_CHOLMOD(free_dense)(
+	CHM_DN *, CHM_CM);
+R_MATRIX_INLINE    int R_MATRIX_CHOLMOD(free_factor)(
+	CHM_FR *, CHM_CM);
+R_MATRIX_INLINE    int R_MATRIX_CHOLMOD(free_sparse)(
+	CHM_SP *, CHM_CM);
+R_MATRIX_INLINE    int R_MATRIX_CHOLMOD(free_triplet)(
+	CHM_TR *, CHM_CM);
+R_MATRIX_INLINE    int R_MATRIX_CHOLMOD(nnz)(
+	CHM_SP, CHM_CM);
+R_MATRIX_INLINE    int R_MATRIX_CHOLMOD(scale)(
+	CHM_DN, int, CHM_SP, CHM_CM);
+R_MATRIX_INLINE    int R_MATRIX_CHOLMOD(sdmult)(
+	CHM_SP, int, double[2], double[2], CHM_DN, CHM_DN, CHM_CM);
+R_MATRIX_INLINE CHM_DN R_MATRIX_CHOLMOD(solve)(
+	int, CHM_FR, CHM_DN, CHM_CM);
+R_MATRIX_INLINE    int R_MATRIX_CHOLMOD(solve2)(
+	int, CHM_FR, CHM_DN, CHM_DN *, CHM_DN *, CHM_DN *, CHM_CM);
+R_MATRIX_INLINE    int R_MATRIX_CHOLMOD(sort)(
+	CHM_SP, CHM_CM);
+R_MATRIX_INLINE CHM_DN R_MATRIX_CHOLMOD(sparse_to_dense)(
+	CHM_SP, CHM_CM);
+R_MATRIX_INLINE CHM_TR R_MATRIX_CHOLMOD(sparse_to_triplet)(
+	CHM_SP, CHM_CM);
+R_MATRIX_INLINE CHM_SP R_MATRIX_CHOLMOD(speye)(
+	size_t, size_t, int, CHM_CM);
+R_MATRIX_INLINE CHM_SP R_MATRIX_CHOLMOD(spsolve)(
+	int, CHM_FR, CHM_SP, CHM_CM);
+R_MATRIX_INLINE CHM_SP R_MATRIX_CHOLMOD(ssmult)(
+	CHM_SP, CHM_SP, int, int, int, CHM_CM);
+R_MATRIX_INLINE    int R_MATRIX_CHOLMOD(start)(
+	CHM_CM);
+R_MATRIX_INLINE CHM_SP R_MATRIX_CHOLMOD(submatrix)(
+	CHM_SP, int *, int, int *, int, int, int, CHM_CM);
+R_MATRIX_INLINE CHM_SP R_MATRIX_CHOLMOD(transpose)(
+	CHM_SP, int, CHM_CM);
+R_MATRIX_INLINE CHM_SP R_MATRIX_CHOLMOD(triplet_to_sparse)(
+	CHM_TR, int, CHM_CM);
+R_MATRIX_INLINE    int R_MATRIX_CHOLMOD(updown)(
+	int, CHM_SP, CHM_FR, CHM_CM);
+R_MATRIX_INLINE CHM_SP R_MATRIX_CHOLMOD(vertcat)(
+	CHM_SP, CHM_SP, int, CHM_CM);
 
-int cholmod_gpu_deallocate   ( cholmod_common *Common ) ;
-int cholmod_l_gpu_deallocate ( cholmod_common *Common ) ;
-
-void cholmod_gpu_end   ( cholmod_common *Common ) ;
-void cholmod_l_gpu_end ( cholmod_common *Common ) ;
-
-int cholmod_gpu_allocate   ( cholmod_common *Common ) ;
-int cholmod_l_gpu_allocate ( cholmod_common *Common ) ;
-
 #ifdef __cplusplus
 }
 #endif
 
-#endif
+/* >>>> Matrix >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
 
-#endif
+#endif /* !defined(R_MATRIX_CHOLMOD_H) */
